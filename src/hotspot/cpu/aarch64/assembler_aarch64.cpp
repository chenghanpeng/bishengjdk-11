/*
 * Copyright (c) 1997, 2012, Oracle and/or its affiliates. All rights reserved.
 * Copyright (c) 2014, Red Hat Inc. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

#include <stdio.h>
#include <sys/types.h>

#include "precompiled.hpp"
#include "asm/assembler.hpp"
#include "asm/assembler.inline.hpp"
#include "interpreter/interpreter.hpp"

#ifndef PRODUCT
const unsigned long Assembler::asm_bp = 0x00007fffee09ac88;
#endif

#include "compiler/disassembler.hpp"
#include "memory/resourceArea.hpp"
#include "runtime/interfaceSupport.inline.hpp"
#include "runtime/sharedRuntime.hpp"
#include "immediate_aarch64.hpp"

extern "C" void entry(CodeBuffer *cb);

#define __ _masm.
#ifdef PRODUCT
#define BLOCK_COMMENT(str) /* nothing */
#else
#define BLOCK_COMMENT(str) block_comment(str)
#endif

#define BIND(label) bind(label); __ BLOCK_COMMENT(#label ":")

static float unpack(unsigned value);

short Assembler::SIMD_Size_in_bytes[] = {
  // T8B, T16B, T4H, T8H, T2S, T4S, T1D, T2D, T1Q
       8,   16,   8,  16,   8,  16,   8,  16,  16
};

#ifdef ASSERT
static void asm_check(const unsigned int *insns, const unsigned int *insns1, size_t len) {
    bool ok = true;
    for (unsigned int i = 0; i < len; i++) {
      if (insns[i] != insns1[i]) {
        ok = false;
        printf("Ours:\n");
        Disassembler::decode((address)&insns1[i], (address)&insns1[i+1]);
        printf("Theirs:\n");
        Disassembler::decode((address)&insns[i], (address)&insns[i+1]);
        printf("\n");
      }
    }
    assert(ok, "Assembler smoke test failed");
  }
#endif // ASSERT

void entry(CodeBuffer *cb) {

  // {
  //   for (int i = 0; i < 256; i+=16)
  //     {
  //    printf("\"%20.20g\", ", unpack(i));
  //    printf("\"%20.20g\", ", unpack(i+1));
  //     }
  //   printf("\n");
  // }

  Assembler _masm(cb);
  address entry = __ pc();

  // Smoke test for assembler

#ifdef ASSERT
// BEGIN  Generated code -- do not edit
// Generated by aarch64-asmtest.py
    Label back, forth;
    __ bind(back);

// ArithOp
    __ add(r26, r23, r13, Assembler::LSL, 32);         //	add	x26, x23, x13, LSL #32
    __ sub(r12, r24, r9, Assembler::LSR, 37);          //	sub	x12, x24, x9, LSR #37
    __ adds(r28, r15, r8, Assembler::ASR, 39);         //	adds	x28, x15, x8, ASR #39
    __ subs(r7, r28, r30, Assembler::ASR, 57);         //	subs	x7, x28, x30, ASR #57
    __ addw(r9, r22, r27, Assembler::ASR, 15);         //	add	w9, w22, w27, ASR #15
    __ subw(r3, r13, r18, Assembler::ASR, 30);         //	sub	w3, w13, w18, ASR #30
    __ addsw(r14, r26, r8, Assembler::ASR, 17);        //	adds	w14, w26, w8, ASR #17
    __ subsw(r0, r22, r12, Assembler::ASR, 21);        //	subs	w0, w22, w12, ASR #21
    __ andr(r0, r15, r26, Assembler::LSL, 20);         //	and	x0, x15, x26, LSL #20
    __ orr(r26, r5, r17, Assembler::LSL, 61);          //	orr	x26, x5, x17, LSL #61
    __ eor(r24, r13, r2, Assembler::LSL, 32);          //	eor	x24, x13, x2, LSL #32
    __ ands(r28, r3, r17, Assembler::ASR, 35);         //	ands	x28, x3, x17, ASR #35
    __ andw(r25, r16, r29, Assembler::LSR, 18);        //	and	w25, w16, w29, LSR #18
    __ orrw(r13, r18, r11, Assembler::LSR, 9);         //	orr	w13, w18, w11, LSR #9
    __ eorw(r5, r5, r18, Assembler::LSR, 15);          //	eor	w5, w5, w18, LSR #15
    __ andsw(r2, r23, r27, Assembler::ASR, 26);        //	ands	w2, w23, w27, ASR #26
    __ bic(r27, r28, r16, Assembler::LSR, 45);         //	bic	x27, x28, x16, LSR #45
    __ orn(r8, r25, r26, Assembler::ASR, 37);          //	orn	x8, x25, x26, ASR #37
    __ eon(r29, r17, r13, Assembler::LSR, 63);         //	eon	x29, x17, x13, LSR #63
    __ bics(r28, r24, r2, Assembler::LSR, 31);         //	bics	x28, x24, x2, LSR #31
    __ bicw(r19, r26, r7, Assembler::ASR, 3);          //	bic	w19, w26, w7, ASR #3
    __ ornw(r6, r24, r10, Assembler::ASR, 3);          //	orn	w6, w24, w10, ASR #3
    __ eonw(r4, r21, r1, Assembler::LSR, 29);          //	eon	w4, w21, w1, LSR #29
    __ bicsw(r16, r21, r0, Assembler::LSR, 19);        //	bics	w16, w21, w0, LSR #19

// AddSubImmOp
    __ addw(r17, r12, 379u);                           //	add	w17, w12, #379
    __ addsw(r30, r1, 22u);                            //	adds	w30, w1, #22
    __ subw(r29, r5, 126u);                            //	sub	w29, w5, #126
    __ subsw(r6, r24, 960u);                           //	subs	w6, w24, #960
    __ add(r0, r13, 104u);                             //	add	x0, x13, #104
    __ adds(r8, r6, 663u);                             //	adds	x8, x6, #663
    __ sub(r10, r5, 516u);                             //	sub	x10, x5, #516
    __ subs(r1, r3, 1012u);                            //	subs	x1, x3, #1012

// LogicalImmOp
    __ andw(r6, r11, 4294049777ull);                   //	and	w6, w11, #0xfff1fff1
    __ orrw(r28, r5, 4294966791ull);                   //	orr	w28, w5, #0xfffffe07
    __ eorw(r1, r20, 134217216ull);                    //	eor	w1, w20, #0x7fffe00
    __ andsw(r7, r18, 1048576ull);                     //	ands	w7, w18, #0x100000
    __ andr(r14, r12, 9223372036854775808ull);         //	and	x14, x12, #0x8000000000000000
    __ orr(r9, r11, 562675075514368ull);               //	orr	x9, x11, #0x1ffc000000000
    __ eor(r17, r0, 18014398509481728ull);             //	eor	x17, x0, #0x3fffffffffff00
    __ ands(r1, r8, 18446744073705357315ull);          //	ands	x1, x8, #0xffffffffffc00003

// AbsOp
    __ b(__ pc());                                     //	b	.
    __ b(back);                                        //	b	back
    __ b(forth);                                       //	b	forth
    __ bl(__ pc());                                    //	bl	.
    __ bl(back);                                       //	bl	back
    __ bl(forth);                                      //	bl	forth

// RegAndAbsOp
    __ cbzw(r10, __ pc());                             //	cbz	w10, .
    __ cbzw(r10, back);                                //	cbz	w10, back
    __ cbzw(r10, forth);                               //	cbz	w10, forth
    __ cbnzw(r8, __ pc());                             //	cbnz	w8, .
    __ cbnzw(r8, back);                                //	cbnz	w8, back
    __ cbnzw(r8, forth);                               //	cbnz	w8, forth
    __ cbz(r11, __ pc());                              //	cbz	x11, .
    __ cbz(r11, back);                                 //	cbz	x11, back
    __ cbz(r11, forth);                                //	cbz	x11, forth
    __ cbnz(r29, __ pc());                             //	cbnz	x29, .
    __ cbnz(r29, back);                                //	cbnz	x29, back
    __ cbnz(r29, forth);                               //	cbnz	x29, forth
    __ adr(r19, __ pc());                              //	adr	x19, .
    __ adr(r19, back);                                 //	adr	x19, back
    __ adr(r19, forth);                                //	adr	x19, forth
    __ _adrp(r19, __ pc());                            //	adrp	x19, .

// RegImmAbsOp
    __ tbz(r22, 6, __ pc());                           //	tbz	x22, #6, .
    __ tbz(r22, 6, back);                              //	tbz	x22, #6, back
    __ tbz(r22, 6, forth);                             //	tbz	x22, #6, forth
    __ tbnz(r12, 11, __ pc());                         //	tbnz	x12, #11, .
    __ tbnz(r12, 11, back);                            //	tbnz	x12, #11, back
    __ tbnz(r12, 11, forth);                           //	tbnz	x12, #11, forth

// MoveWideImmOp
    __ movnw(r0, 6301, 0);                             //	movn	w0, #6301, lsl 0
    __ movzw(r7, 20886, 0);                            //	movz	w7, #20886, lsl 0
    __ movkw(r27, 18617, 0);                           //	movk	w27, #18617, lsl 0
    __ movn(r12, 22998, 16);                           //	movn	x12, #22998, lsl 16
    __ movz(r20, 1532, 16);                            //	movz	x20, #1532, lsl 16
    __ movk(r8, 5167, 32);                             //	movk	x8, #5167, lsl 32

// BitfieldOp
    __ sbfm(r15, r17, 24, 28);                         //	sbfm	x15, x17, #24, #28
    __ bfmw(r15, r9, 14, 25);                          //	bfm	w15, w9, #14, #25
    __ ubfmw(r27, r25, 6, 31);                         //	ubfm	w27, w25, #6, #31
    __ sbfm(r19, r2, 23, 31);                          //	sbfm	x19, x2, #23, #31
    __ bfm(r12, r21, 10, 6);                           //	bfm	x12, x21, #10, #6
    __ ubfm(r22, r0, 26, 16);                          //	ubfm	x22, x0, #26, #16

// ExtractOp
    __ extrw(r3, r3, r20, 27);                         //	extr	w3, w3, w20, #27
    __ extr(r8, r30, r3, 54);                          //	extr	x8, x30, x3, #54

// CondBranchOp
    __ br(Assembler::EQ, __ pc());                     //	b.EQ	.
    __ br(Assembler::EQ, back);                        //	b.EQ	back
    __ br(Assembler::EQ, forth);                       //	b.EQ	forth
    __ br(Assembler::NE, __ pc());                     //	b.NE	.
    __ br(Assembler::NE, back);                        //	b.NE	back
    __ br(Assembler::NE, forth);                       //	b.NE	forth
    __ br(Assembler::HS, __ pc());                     //	b.HS	.
    __ br(Assembler::HS, back);                        //	b.HS	back
    __ br(Assembler::HS, forth);                       //	b.HS	forth
    __ br(Assembler::CS, __ pc());                     //	b.CS	.
    __ br(Assembler::CS, back);                        //	b.CS	back
    __ br(Assembler::CS, forth);                       //	b.CS	forth
    __ br(Assembler::LO, __ pc());                     //	b.LO	.
    __ br(Assembler::LO, back);                        //	b.LO	back
    __ br(Assembler::LO, forth);                       //	b.LO	forth
    __ br(Assembler::CC, __ pc());                     //	b.CC	.
    __ br(Assembler::CC, back);                        //	b.CC	back
    __ br(Assembler::CC, forth);                       //	b.CC	forth
    __ br(Assembler::MI, __ pc());                     //	b.MI	.
    __ br(Assembler::MI, back);                        //	b.MI	back
    __ br(Assembler::MI, forth);                       //	b.MI	forth
    __ br(Assembler::PL, __ pc());                     //	b.PL	.
    __ br(Assembler::PL, back);                        //	b.PL	back
    __ br(Assembler::PL, forth);                       //	b.PL	forth
    __ br(Assembler::VS, __ pc());                     //	b.VS	.
    __ br(Assembler::VS, back);                        //	b.VS	back
    __ br(Assembler::VS, forth);                       //	b.VS	forth
    __ br(Assembler::VC, __ pc());                     //	b.VC	.
    __ br(Assembler::VC, back);                        //	b.VC	back
    __ br(Assembler::VC, forth);                       //	b.VC	forth
    __ br(Assembler::HI, __ pc());                     //	b.HI	.
    __ br(Assembler::HI, back);                        //	b.HI	back
    __ br(Assembler::HI, forth);                       //	b.HI	forth
    __ br(Assembler::LS, __ pc());                     //	b.LS	.
    __ br(Assembler::LS, back);                        //	b.LS	back
    __ br(Assembler::LS, forth);                       //	b.LS	forth
    __ br(Assembler::GE, __ pc());                     //	b.GE	.
    __ br(Assembler::GE, back);                        //	b.GE	back
    __ br(Assembler::GE, forth);                       //	b.GE	forth
    __ br(Assembler::LT, __ pc());                     //	b.LT	.
    __ br(Assembler::LT, back);                        //	b.LT	back
    __ br(Assembler::LT, forth);                       //	b.LT	forth
    __ br(Assembler::GT, __ pc());                     //	b.GT	.
    __ br(Assembler::GT, back);                        //	b.GT	back
    __ br(Assembler::GT, forth);                       //	b.GT	forth
    __ br(Assembler::LE, __ pc());                     //	b.LE	.
    __ br(Assembler::LE, back);                        //	b.LE	back
    __ br(Assembler::LE, forth);                       //	b.LE	forth
    __ br(Assembler::AL, __ pc());                     //	b.AL	.
    __ br(Assembler::AL, back);                        //	b.AL	back
    __ br(Assembler::AL, forth);                       //	b.AL	forth
    __ br(Assembler::NV, __ pc());                     //	b.NV	.
    __ br(Assembler::NV, back);                        //	b.NV	back
    __ br(Assembler::NV, forth);                       //	b.NV	forth

// ImmOp
    __ svc(12999);                                     //	svc	#12999
    __ hvc(2665);                                      //	hvc	#2665
    __ smc(9002);                                      //	smc	#9002
    __ brk(14843);                                     //	brk	#14843
    __ hlt(25964);                                     //	hlt	#25964

// Op
    __ nop();                                          //	nop	
    __ eret();                                         //	eret	
    __ drps();                                         //	drps	
    __ isb();                                          //	isb	

// SystemOp
    __ dsb(Assembler::ST);                             //	dsb	ST
    __ dmb(Assembler::OSHST);                          //	dmb	OSHST

// OneRegOp
    __ br(r16);                                        //	br	x16
    __ blr(r20);                                       //	blr	x20

// LoadStoreExclusiveOp
    __ stxr(r10, r27, r8);                             //	stxr	w10, x27, [x8]
    __ stlxr(r0, r1, r21);                             //	stlxr	w0, x1, [x21]
    __ ldxr(r17, r29);                                 //	ldxr	x17, [x29]
    __ ldaxr(r29, r28);                                //	ldaxr	x29, [x28]
    __ stlr(r1, r23);                                  //	stlr	x1, [x23]
    __ ldar(r21, r20);                                 //	ldar	x21, [x20]

// LoadStoreExclusiveOp
    __ stxrw(r22, r27, r19);                           //	stxr	w22, w27, [x19]
    __ stlxrw(r11, r16, r6);                           //	stlxr	w11, w16, [x6]
    __ ldxrw(r18, r0);                                 //	ldxr	w18, [x0]
    __ ldaxrw(r4, r10);                                //	ldaxr	w4, [x10]
    __ stlrw(r24, r22);                                //	stlr	w24, [x22]
    __ ldarw(r10, r19);                                //	ldar	w10, [x19]

// LoadStoreExclusiveOp
    __ stxrh(r1, r5, r30);                             //	stxrh	w1, w5, [x30]
    __ stlxrh(r8, r12, r17);                           //	stlxrh	w8, w12, [x17]
    __ ldxrh(r9, r14);                                 //	ldxrh	w9, [x14]
    __ ldaxrh(r7, r1);                                 //	ldaxrh	w7, [x1]
    __ stlrh(r5, r16);                                 //	stlrh	w5, [x16]
    __ ldarh(r2, r12);                                 //	ldarh	w2, [x12]

// LoadStoreExclusiveOp
    __ stxrb(r10, r12, r3);                            //	stxrb	w10, w12, [x3]
    __ stlxrb(r28, r14, r26);                          //	stlxrb	w28, w14, [x26]
    __ ldxrb(r30, r10);                                //	ldxrb	w30, [x10]
    __ ldaxrb(r14, r21);                               //	ldaxrb	w14, [x21]
    __ stlrb(r13, r9);                                 //	stlrb	w13, [x9]
    __ ldarb(r22, r27);                                //	ldarb	w22, [x27]

// LoadStoreExclusiveOp
    __ ldxp(r28, r19, r11);                            //	ldxp	x28, x19, [x11]
    __ ldaxp(r30, r19, r2);                            //	ldaxp	x30, x19, [x2]
    __ stxp(r2, r23, r1, r0);                          //	stxp	w2, x23, x1, [x0]
    __ stlxp(r12, r16, r13, r15);                      //	stlxp	w12, x16, x13, [x15]

// LoadStoreExclusiveOp
    __ ldxpw(r18, r21, r13);                           //	ldxp	w18, w21, [x13]
    __ ldaxpw(r11, r30, r8);                           //	ldaxp	w11, w30, [x8]
    __ stxpw(r24, r13, r11, r1);                       //	stxp	w24, w13, w11, [x1]
    __ stlxpw(r26, r21, r27, r13);                     //	stlxp	w26, w21, w27, [x13]

// base_plus_unscaled_offset 
// LoadStoreOp
    __ str(r11, Address(r20, -103));                   //	str	x11, [x20, -103]
    __ strw(r28, Address(r16, 62));                    //	str	w28, [x16, 62]
    __ strb(r27, Address(r9, -9));                     //	strb	w27, [x9, -9]
    __ strh(r2, Address(r25, -50));                    //	strh	w2, [x25, -50]
    __ ldr(r4, Address(r2, -241));                     //	ldr	x4, [x2, -241]
    __ ldrw(r30, Address(r20, -31));                   //	ldr	w30, [x20, -31]
    __ ldrb(r18, Address(r23, -23));                   //	ldrb	w18, [x23, -23]
    __ ldrh(r29, Address(r26, -1));                    //	ldrh	w29, [x26, -1]
    __ ldrsb(r1, Address(r9, 6));                      //	ldrsb	x1, [x9, 6]
    __ ldrsh(r11, Address(r12, 19));                   //	ldrsh	x11, [x12, 19]
    __ ldrshw(r11, Address(r1, -50));                  //	ldrsh	w11, [x1, -50]
    __ ldrsw(r19, Address(r24, 41));                   //	ldrsw	x19, [x24, 41]
    __ ldrd(v24, Address(r24, 95));                    //	ldr	d24, [x24, 95]
    __ ldrs(v15, Address(r5, -43));                    //	ldr	s15, [x5, -43]
    __ strd(v21, Address(r27, 1));                     //	str	d21, [x27, 1]
    __ strs(v23, Address(r13, -107));                  //	str	s23, [x13, -107]

// pre 
// LoadStoreOp
    __ str(r11, Address(__ pre(r0, 8)));               //	str	x11, [x0, 8]!
    __ strw(r3, Address(__ pre(r0, 29)));              //	str	w3, [x0, 29]!
    __ strb(r11, Address(__ pre(r14, 9)));             //	strb	w11, [x14, 9]!
    __ strh(r29, Address(__ pre(r24, -3)));            //	strh	w29, [x24, -3]!
    __ ldr(r13, Address(__ pre(r17, -144)));           //	ldr	x13, [x17, -144]!
    __ ldrw(r12, Address(__ pre(r22, -6)));            //	ldr	w12, [x22, -6]!
    __ ldrb(r13, Address(__ pre(r12, -10)));           //	ldrb	w13, [x12, -10]!
    __ ldrh(r0, Address(__ pre(r21, -21)));            //	ldrh	w0, [x21, -21]!
    __ ldrsb(r23, Address(__ pre(r7, 4)));             //	ldrsb	x23, [x7, 4]!
    __ ldrsh(r3, Address(__ pre(r7, -53)));            //	ldrsh	x3, [x7, -53]!
    __ ldrshw(r28, Address(__ pre(r5, -7)));           //	ldrsh	w28, [x5, -7]!
    __ ldrsw(r24, Address(__ pre(r9, -18)));           //	ldrsw	x24, [x9, -18]!
    __ ldrd(v14, Address(__ pre(r11, 12)));            //	ldr	d14, [x11, 12]!
    __ ldrs(v19, Address(__ pre(r12, -67)));           //	ldr	s19, [x12, -67]!
    __ strd(v20, Address(__ pre(r0, -253)));           //	str	d20, [x0, -253]!
    __ strs(v8, Address(__ pre(r0, 64)));              //	str	s8, [x0, 64]!

// post 
// LoadStoreOp
    __ str(r4, Address(__ post(r28, -94)));            //	str	x4, [x28], -94
    __ strw(r12, Address(__ post(r7, -54)));           //	str	w12, [x7], -54
    __ strb(r27, Address(__ post(r10, -24)));          //	strb	w27, [x10], -24
    __ strh(r6, Address(__ post(r8, 27)));             //	strh	w6, [x8], 27
    __ ldr(r14, Address(__ post(r10, -202)));          //	ldr	x14, [x10], -202
    __ ldrw(r16, Address(__ post(r5, -41)));           //	ldr	w16, [x5], -41
    __ ldrb(r2, Address(__ post(r14, 9)));             //	ldrb	w2, [x14], 9
    __ ldrh(r28, Address(__ post(r13, -20)));          //	ldrh	w28, [x13], -20
    __ ldrsb(r9, Address(__ post(r13, -31)));          //	ldrsb	x9, [x13], -31
    __ ldrsh(r3, Address(__ post(r24, -36)));          //	ldrsh	x3, [x24], -36
    __ ldrshw(r20, Address(__ post(r3, 6)));           //	ldrsh	w20, [x3], 6
    __ ldrsw(r7, Address(__ post(r19, -1)));           //	ldrsw	x7, [x19], -1
    __ ldrd(v30, Address(__ post(r8, -130)));          //	ldr	d30, [x8], -130
    __ ldrs(v25, Address(__ post(r15, 21)));           //	ldr	s25, [x15], 21
    __ strd(v14, Address(__ post(r23, 90)));           //	str	d14, [x23], 90
    __ strs(v8, Address(__ post(r0, -33)));            //	str	s8, [x0], -33

// base_plus_reg 
// LoadStoreOp
    __ str(r10, Address(r18, r21, Address::sxtw(3)));  //	str	x10, [x18, w21, sxtw #3]
    __ strw(r4, Address(r13, r22, Address::sxtw(2)));  //	str	w4, [x13, w22, sxtw #2]
    __ strb(r13, Address(r0, r19, Address::uxtw(0)));  //	strb	w13, [x0, w19, uxtw #0]
    __ strh(r12, Address(r27, r6, Address::sxtw(0)));  //	strh	w12, [x27, w6, sxtw #0]
    __ ldr(r0, Address(r8, r16, Address::lsl(0)));     //	ldr	x0, [x8, x16, lsl #0]
    __ ldrw(r0, Address(r4, r26, Address::sxtx(0)));   //	ldr	w0, [x4, x26, sxtx #0]
    __ ldrb(r14, Address(r25, r5, Address::sxtw(0)));  //	ldrb	w14, [x25, w5, sxtw #0]
    __ ldrh(r9, Address(r4, r18, Address::uxtw(0)));   //	ldrh	w9, [x4, w18, uxtw #0]
    __ ldrsb(r27, Address(r4, r7, Address::lsl(0)));   //	ldrsb	x27, [x4, x7, lsl #0]
    __ ldrsh(r15, Address(r17, r30, Address::sxtw(0))); //	ldrsh	x15, [x17, w30, sxtw #0]
    __ ldrshw(r16, Address(r0, r22, Address::sxtw(0))); //	ldrsh	w16, [x0, w22, sxtw #0]
    __ ldrsw(r22, Address(r10, r30, Address::sxtx(2))); //	ldrsw	x22, [x10, x30, sxtx #2]
    __ ldrd(v29, Address(r21, r10, Address::sxtx(3))); //	ldr	d29, [x21, x10, sxtx #3]
    __ ldrs(v3, Address(r11, r19, Address::uxtw(0)));  //	ldr	s3, [x11, w19, uxtw #0]
    __ strd(v13, Address(r28, r29, Address::uxtw(3))); //	str	d13, [x28, w29, uxtw #3]
    __ strs(v23, Address(r29, r5, Address::sxtx(2)));  //	str	s23, [x29, x5, sxtx #2]

// base_plus_scaled_offset 
// LoadStoreOp
    __ str(r5, Address(r8, 12600));                    //	str	x5, [x8, 12600]
    __ strw(r29, Address(r24, 7880));                  //	str	w29, [x24, 7880]
    __ strb(r19, Address(r17, 1566));                  //	strb	w19, [x17, 1566]
    __ strh(r13, Address(r19, 3984));                  //	strh	w13, [x19, 3984]
    __ ldr(r19, Address(r23, 13632));                  //	ldr	x19, [x23, 13632]
    __ ldrw(r23, Address(r29, 6264));                  //	ldr	w23, [x29, 6264]
    __ ldrb(r22, Address(r11, 2012));                  //	ldrb	w22, [x11, 2012]
    __ ldrh(r3, Address(r10, 3784));                   //	ldrh	w3, [x10, 3784]
    __ ldrsb(r8, Address(r16, 1951));                  //	ldrsb	x8, [x16, 1951]
    __ ldrsh(r23, Address(r20, 3346));                 //	ldrsh	x23, [x20, 3346]
    __ ldrshw(r2, Address(r1, 3994));                  //	ldrsh	w2, [x1, 3994]
    __ ldrsw(r4, Address(r17, 7204));                  //	ldrsw	x4, [x17, 7204]
    __ ldrd(v20, Address(r27, 14400));                 //	ldr	d20, [x27, 14400]
    __ ldrs(v25, Address(r14, 8096));                  //	ldr	s25, [x14, 8096]
    __ strd(v26, Address(r10, 15024));                 //	str	d26, [x10, 15024]
    __ strs(v9, Address(r3, 6936));                    //	str	s9, [x3, 6936]

// pcrel 
// LoadStoreOp
    __ ldr(r27, forth);                                //	ldr	x27, forth
    __ ldrw(r11, __ pc());                             //	ldr	w11, .

// LoadStoreOp
    __ prfm(Address(r3, -187));                        //	prfm	PLDL1KEEP, [x3, -187]

// LoadStoreOp
    __ prfm(__ pc());                                  //	prfm	PLDL1KEEP, .

// LoadStoreOp
    __ prfm(Address(r29, r14, Address::lsl(0)));       //	prfm	PLDL1KEEP, [x29, x14, lsl #0]

// LoadStoreOp
    __ prfm(Address(r4, 13312));                       //	prfm	PLDL1KEEP, [x4, 13312]

// AddSubCarryOp
    __ adcw(r21, r1, r7);                              //	adc	w21, w1, w7
    __ adcsw(r8, r5, r7);                              //	adcs	w8, w5, w7
    __ sbcw(r7, r27, r14);                             //	sbc	w7, w27, w14
    __ sbcsw(r27, r4, r17);                            //	sbcs	w27, w4, w17
    __ adc(r0, r28, r0);                               //	adc	x0, x28, x0
    __ adcs(r12, r24, r30);                            //	adcs	x12, x24, x30
    __ sbc(r0, r25, r15);                              //	sbc	x0, x25, x15
    __ sbcs(r1, r24, r3);                              //	sbcs	x1, x24, x3

// AddSubExtendedOp
    __ addw(r18, r24, r20, ext::uxtb, 2);              //	add	w18, w24, w20, uxtb #2
    __ addsw(r13, r28, r10, ext::uxth, 1);             //	adds	w13, w28, w10, uxth #1
    __ sub(r15, r16, r2, ext::sxth, 2);                //	sub	x15, x16, x2, sxth #2
    __ subsw(r29, r13, r13, ext::uxth, 2);             //	subs	w29, w13, w13, uxth #2
    __ add(r12, r20, r12, ext::sxtw, 3);               //	add	x12, x20, x12, sxtw #3
    __ adds(r30, r27, r11, ext::sxtb, 1);              //	adds	x30, x27, x11, sxtb #1
    __ sub(r14, r7, r1, ext::sxtw, 2);                 //	sub	x14, x7, x1, sxtw #2
    __ subs(r29, r3, r27, ext::sxth, 1);               //	subs	x29, x3, x27, sxth #1

// ConditionalCompareOp
    __ ccmnw(r0, r13, 14u, Assembler::MI);             //	ccmn	w0, w13, #14, MI
    __ ccmpw(r22, r18, 6u, Assembler::CC);             //	ccmp	w22, w18, #6, CC
    __ ccmn(r18, r30, 14u, Assembler::VS);             //	ccmn	x18, x30, #14, VS
    __ ccmp(r10, r19, 12u, Assembler::HI);             //	ccmp	x10, x19, #12, HI

// ConditionalCompareImmedOp
    __ ccmnw(r6, 18, 2, Assembler::LE);                //	ccmn	w6, #18, #2, LE
    __ ccmpw(r9, 13, 4, Assembler::HI);                //	ccmp	w9, #13, #4, HI
    __ ccmn(r21, 11, 11, Assembler::LO);               //	ccmn	x21, #11, #11, LO
    __ ccmp(r4, 13, 2, Assembler::VC);                 //	ccmp	x4, #13, #2, VC

// ConditionalSelectOp
    __ cselw(r12, r2, r22, Assembler::HI);             //	csel	w12, w2, w22, HI
    __ csincw(r24, r16, r17, Assembler::HS);           //	csinc	w24, w16, w17, HS
    __ csinvw(r6, r7, r16, Assembler::LT);             //	csinv	w6, w7, w16, LT
    __ csnegw(r11, r27, r22, Assembler::LS);           //	csneg	w11, w27, w22, LS
    __ csel(r10, r3, r29, Assembler::LT);              //	csel	x10, x3, x29, LT
    __ csinc(r12, r26, r27, Assembler::CC);            //	csinc	x12, x26, x27, CC
    __ csinv(r15, r10, r21, Assembler::GT);            //	csinv	x15, x10, x21, GT
    __ csneg(r30, r23, r9, Assembler::GT);             //	csneg	x30, x23, x9, GT

// TwoRegOp
    __ rbitw(r30, r10);                                //	rbit	w30, w10
    __ rev16w(r29, r15);                               //	rev16	w29, w15
    __ revw(r29, r30);                                 //	rev	w29, w30
    __ clzw(r25, r21);                                 //	clz	w25, w21
    __ clsw(r4, r0);                                   //	cls	w4, w0
    __ rbit(r18, r21);                                 //	rbit	x18, x21
    __ rev16(r29, r16);                                //	rev16	x29, x16
    __ rev32(r21, r20);                                //	rev32	x21, x20
    __ rev(r6, r19);                                   //	rev	x6, x19
    __ clz(r30, r3);                                   //	clz	x30, x3
    __ cls(r21, r19);                                  //	cls	x21, x19

// ThreeRegOp
    __ udivw(r11, r24, r0);                            //	udiv	w11, w24, w0
    __ sdivw(r27, r25, r14);                           //	sdiv	w27, w25, w14
    __ lslvw(r3, r14, r18);                            //	lslv	w3, w14, w18
    __ lsrvw(r7, r15, r24);                            //	lsrv	w7, w15, w24
    __ asrvw(r28, r17, r25);                           //	asrv	w28, w17, w25
    __ rorvw(r2, r26, r28);                            //	rorv	w2, w26, w28
    __ udiv(r5, r25, r26);                             //	udiv	x5, x25, x26
    __ sdiv(r27, r16, r18);                            //	sdiv	x27, x16, x18
    __ lslv(r6, r21, r12);                             //	lslv	x6, x21, x12
    __ lsrv(r0, r4, r12);                              //	lsrv	x0, x4, x12
    __ asrv(r27, r17, r28);                            //	asrv	x27, x17, x28
    __ rorv(r28, r2, r18);                             //	rorv	x28, x2, x18

// FourRegMulOp
    __ maddw(r10, r15, r14, r14);                      //	madd	w10, w15, w14, w14
    __ msubw(r3, r25, r15, r19);                       //	msub	w3, w25, w15, w19
    __ madd(r14, r5, r16, r4);                         //	madd	x14, x5, x16, x4
    __ msub(r26, r25, r4, r2);                         //	msub	x26, x25, x4, x2
    __ smaddl(r2, r12, r29, r17);                      //	smaddl	x2, w12, w29, x17
    __ smsubl(r8, r7, r3, r4);                         //	smsubl	x8, w7, w3, x4
    __ umaddl(r25, r4, r26, r25);                      //	umaddl	x25, w4, w26, x25
    __ umsubl(r4, r17, r0, r26);                       //	umsubl	x4, w17, w0, x26

// ThreeRegFloatOp
    __ fmuls(v17, v23, v15);                           //	fmul	s17, s23, s15
    __ fdivs(v21, v28, v17);                           //	fdiv	s21, s28, s17
    __ fadds(v27, v10, v3);                            //	fadd	s27, s10, s3
    __ fsubs(v0, v7, v25);                             //	fsub	s0, s7, s25
    __ fmuls(v9, v6, v15);                             //	fmul	s9, s6, s15
    __ fmuld(v29, v15, v10);                           //	fmul	d29, d15, d10
    __ fdivd(v2, v17, v7);                             //	fdiv	d2, d17, d7
    __ faddd(v11, v11, v23);                           //	fadd	d11, d11, d23
    __ fsubd(v7, v29, v23);                            //	fsub	d7, d29, d23
    __ fmuld(v14, v27, v11);                           //	fmul	d14, d27, d11

// FourRegFloatOp
    __ fmadds(v11, v4, v24, v12);                      //	fmadd	s11, s4, s24, s12
    __ fmsubs(v15, v14, v20, v11);                     //	fmsub	s15, s14, s20, s11
    __ fnmadds(v28, v13, v11, v12);                    //	fnmadd	s28, s13, s11, s12
    __ fnmadds(v23, v30, v26, v14);                    //	fnmadd	s23, s30, s26, s14
    __ fmaddd(v9, v13, v10, v7);                       //	fmadd	d9, d13, d10, d7
    __ fmsubd(v5, v29, v15, v3);                       //	fmsub	d5, d29, d15, d3
    __ fnmaddd(v11, v12, v15, v30);                    //	fnmadd	d11, d12, d15, d30
    __ fnmaddd(v30, v17, v19, v20);                    //	fnmadd	d30, d17, d19, d20

// TwoRegFloatOp
    __ fmovs(v27, v7);                                 //	fmov	s27, s7
    __ fabss(v9, v21);                                 //	fabs	s9, s21
    __ fnegs(v2, v9);                                  //	fneg	s2, s9
    __ fsqrts(v27, v7);                                //	fsqrt	s27, s7
    __ fcvts(v29, v30);                                //	fcvt	d29, s30
    __ fmovd(v17, v1);                                 //	fmov	d17, d1
    __ fabsd(v2, v6);                                  //	fabs	d2, d6
    __ fnegd(v10, v3);                                 //	fneg	d10, d3
    __ fsqrtd(v24, v11);                               //	fsqrt	d24, d11
    __ fcvtd(v7, v1);                                  //	fcvt	s7, d1

// FloatConvertOp
    __ fcvtzsw(r11, v0);                               //	fcvtzs	w11, s0
    __ fcvtzs(r3, v18);                                //	fcvtzs	x3, s18
    __ fcvtzdw(r28, v6);                               //	fcvtzs	w28, d6
    __ fcvtzd(r22, v6);                                //	fcvtzs	x22, d6
    __ scvtfws(v0, r27);                               //	scvtf	s0, w27
    __ scvtfs(v26, r2);                                //	scvtf	s26, x2
    __ scvtfwd(v5, r7);                                //	scvtf	d5, w7
    __ scvtfd(v28, r11);                               //	scvtf	d28, x11
    __ fmovs(r25, v13);                                //	fmov	w25, s13
    __ fmovd(r11, v23);                                //	fmov	x11, d23
    __ fmovs(v19, r8);                                 //	fmov	s19, w8
    __ fmovd(v18, r21);                                //	fmov	d18, x21

// TwoRegFloatOp
    __ fcmps(v25, v20);                                //	fcmp	s25, s20
    __ fcmpd(v19, v18);                                //	fcmp	d19, d18
    __ fcmps(v2, 0.0);                                 //	fcmp	s2, #0.0
    __ fcmpd(v29, 0.0);                                //	fcmp	d29, #0.0

// LoadStorePairOp
    __ stpw(r8, r21, Address(r19, 16));                //	stp	w8, w21, [x19, #16]
    __ ldpw(r6, r15, Address(r20, 0));                 //	ldp	w6, w15, [x20, #0]
    __ ldpsw(r27, r14, Address(r3, -208));             //	ldpsw	x27, x14, [x3, #-208]
    __ stp(r10, r12, Address(r11, -80));               //	stp	x10, x12, [x11, #-80]
    __ ldp(r7, r14, Address(r7, -32));                 //	ldp	x7, x14, [x7, #-32]

// LoadStorePairOp
    __ stpw(r0, r22, Address(__ pre(r12, 112)));       //	stp	w0, w22, [x12, #112]!
    __ ldpw(r14, r7, Address(__ pre(r8, 48)));         //	ldp	w14, w7, [x8, #48]!
    __ ldpsw(r16, r2, Address(__ pre(r9, 0)));         //	ldpsw	x16, x2, [x9, #0]!
    __ stp(r20, r29, Address(__ pre(r1, -64)));        //	stp	x20, x29, [x1, #-64]!
    __ ldp(r21, r12, Address(__ pre(r5, 80)));         //	ldp	x21, x12, [x5, #80]!

// LoadStorePairOp
    __ stpw(r24, r24, Address(__ post(r27, -112)));    //	stp	w24, w24, [x27], #-112
    __ ldpw(r28, r22, Address(__ post(r18, 16)));      //	ldp	w28, w22, [x18], #16
    __ ldpsw(r17, r6, Address(__ post(r13, -96)));     //	ldpsw	x17, x6, [x13], #-96
    __ stp(r28, r26, Address(__ post(r5, -160)));      //	stp	x28, x26, [x5], #-160
    __ ldp(r6, r21, Address(__ post(r26, -240)));      //	ldp	x6, x21, [x26], #-240

// LoadStorePairOp
    __ stnpw(r13, r20, Address(r30, 32));              //	stnp	w13, w20, [x30, #32]
    __ ldnpw(r17, r11, Address(r5, 96));               //	ldnp	w17, w11, [x5, #96]
    __ stnp(r13, r20, Address(r26, -96));              //	stnp	x13, x20, [x26, #-96]
    __ ldnp(r29, r12, Address(r23, -80));              //	ldnp	x29, x12, [x23, #-80]

// SpecialCases
    __ sve_cpy(z0, __ S, p0, v1);                      //	mov	z0.s, p0/m, s1
    __ sve_inc(r0, __ S);                              //	incw	x0
    __ sve_dec(r1, __ H);                              //	dech	x1
    __ sve_lsl(z0, __ B, z1, 7);                       //	lsl	z0.b, z1.b, #7
    __ sve_lsl(z21, __ H, z1, 15);                     //	lsl	z21.h, z1.h, #15
    __ sve_lsl(z0, __ S, z1, 31);                      //	lsl	z0.s, z1.s, #31
    __ sve_lsl(z0, __ D, z1, 63);                      //	lsl	z0.d, z1.d, #63
    __ sve_lsr(z0, __ B, z1, 7);                       //	lsr	z0.b, z1.b, #7
    __ sve_asr(z0, __ H, z11, 15);                     //	asr	z0.h, z11.h, #15
    __ sve_lsr(z30, __ S, z1, 31);                     //	lsr	z30.s, z1.s, #31
    __ sve_asr(z0, __ D, z1, 63);                      //	asr	z0.d, z1.d, #63
    __ sve_addvl(sp, r0, 31);                          //	addvl	sp, x0, #31
    __ sve_addpl(r1, sp, -32);                         //	addpl	x1, sp, -32
    __ sve_cntp(r8, __ B, p0, p1);                     //	cntp	x8, p0, p1.b
    __ sve_dup(z0, __ B, 127);                         //	dup	z0.b, 127
    __ sve_dup(z1, __ H, -128);                        //	dup	z1.h, -128
    __ sve_dup(z2, __ S, 32512);                       //	dup	z2.s, 32512
    __ sve_dup(z7, __ D, -32768);                      //	dup	z7.d, -32768
    __ sve_ld1b(z0, __ B, p0, Address(sp));            //	ld1b	{z0.b}, p0/z, [sp]
    __ sve_ld1h(z10, __ H, p1, Address(sp, -8));       //	ld1h	{z10.h}, p1/z, [sp, #-8, MUL VL]
    __ sve_ld1w(z20, __ S, p2, Address(r0, 7));        //	ld1w	{z20.s}, p2/z, [x0, #7, MUL VL]
    __ sve_ld1b(z30, __ B, p3, Address(sp, r8));       //	ld1b	{z30.b}, p3/z, [sp, x8]
    __ sve_ld1w(z0, __ S, p4, Address(sp, r28));       //	ld1w	{z0.s}, p4/z, [sp, x28, LSL #2]
    __ sve_ld1d(z11, __ D, p5, Address(r0, r1));       //	ld1d	{z11.d}, p5/z, [x0, x1, LSL #3]
    __ sve_st1b(z22, __ B, p6, Address(sp));           //	st1b	{z22.b}, p6, [sp]
    __ sve_st1b(z31, __ B, p7, Address(sp, -8));       //	st1b	{z31.b}, p7, [sp, #-8, MUL VL]
    __ sve_st1w(z0, __ S, p1, Address(r0, 7));         //	st1w	{z0.s}, p1, [x0, #7, MUL VL]
    __ sve_st1b(z0, __ B, p2, Address(sp, r1));        //	st1b	{z0.b}, p2, [sp, x1]
    __ sve_st1h(z0, __ H, p3, Address(sp, r8));        //	st1h	{z0.h}, p3, [sp, x8, LSL #1]
    __ sve_st1d(z0, __ D, p4, Address(r0, r18));       //	st1d	{z0.d}, p4, [x0, x18, LSL #3]
    __ sve_ldr(z0, Address(sp));                       //	ldr	z0, [sp]
    __ sve_ldr(z31, Address(sp, -256));                //	ldr	z31, [sp, #-256, MUL VL]
    __ sve_str(z8, Address(r8, 255));                  //	str	z8, [x8, #255, MUL VL]

// FloatImmediateOp
    __ fmovd(v0, 2.0);                                 //	fmov d0, #2.0
    __ fmovd(v0, 2.125);                               //	fmov d0, #2.125
    __ fmovd(v0, 4.0);                                 //	fmov d0, #4.0
    __ fmovd(v0, 4.25);                                //	fmov d0, #4.25
    __ fmovd(v0, 8.0);                                 //	fmov d0, #8.0
    __ fmovd(v0, 8.5);                                 //	fmov d0, #8.5
    __ fmovd(v0, 16.0);                                //	fmov d0, #16.0
    __ fmovd(v0, 17.0);                                //	fmov d0, #17.0
    __ fmovd(v0, 0.125);                               //	fmov d0, #0.125
    __ fmovd(v0, 0.1328125);                           //	fmov d0, #0.1328125
    __ fmovd(v0, 0.25);                                //	fmov d0, #0.25
    __ fmovd(v0, 0.265625);                            //	fmov d0, #0.265625
    __ fmovd(v0, 0.5);                                 //	fmov d0, #0.5
    __ fmovd(v0, 0.53125);                             //	fmov d0, #0.53125
    __ fmovd(v0, 1.0);                                 //	fmov d0, #1.0
    __ fmovd(v0, 1.0625);                              //	fmov d0, #1.0625
    __ fmovd(v0, -2.0);                                //	fmov d0, #-2.0
    __ fmovd(v0, -2.125);                              //	fmov d0, #-2.125
    __ fmovd(v0, -4.0);                                //	fmov d0, #-4.0
    __ fmovd(v0, -4.25);                               //	fmov d0, #-4.25
    __ fmovd(v0, -8.0);                                //	fmov d0, #-8.0
    __ fmovd(v0, -8.5);                                //	fmov d0, #-8.5
    __ fmovd(v0, -16.0);                               //	fmov d0, #-16.0
    __ fmovd(v0, -17.0);                               //	fmov d0, #-17.0
    __ fmovd(v0, -0.125);                              //	fmov d0, #-0.125
    __ fmovd(v0, -0.1328125);                          //	fmov d0, #-0.1328125
    __ fmovd(v0, -0.25);                               //	fmov d0, #-0.25
    __ fmovd(v0, -0.265625);                           //	fmov d0, #-0.265625
    __ fmovd(v0, -0.5);                                //	fmov d0, #-0.5
    __ fmovd(v0, -0.53125);                            //	fmov d0, #-0.53125
    __ fmovd(v0, -1.0);                                //	fmov d0, #-1.0
    __ fmovd(v0, -1.0625);                             //	fmov d0, #-1.0625

// SVEVectorOp
    __ sve_add(z14, __ S, z16, z27);                   //	add	z14.s, z16.s, z27.s
    __ sve_sub(z0, __ S, z6, z26);                     //	sub	z0.s, z6.s, z26.s
    __ sve_fadd(z27, __ S, z12, z6);                   //	fadd	z27.s, z12.s, z6.s
    __ sve_fmul(z30, __ S, z4, z19);                   //	fmul	z30.s, z4.s, z19.s
    __ sve_fsub(z11, __ D, z16, z2);                   //	fsub	z11.d, z16.d, z2.d
    __ sve_abs(z15, __ D, p0, z12);                    //	abs	z15.d, p0/m, z12.d
    __ sve_add(z9, __ B, p5, z23);                     //	add	z9.b, p5/m, z9.b, z23.b
    __ sve_asr(z30, __ S, p0, z26);                    //	asr	z30.s, p0/m, z30.s, z26.s
    __ sve_cnt(z4, __ H, p2, z18);                     //	cnt	z4.h, p2/m, z18.h
    __ sve_lsl(z25, __ S, p1, z11);                    //	lsl	z25.s, p1/m, z25.s, z11.s
    __ sve_lsr(z10, __ B, p6, z8);                     //	lsr	z10.b, p6/m, z10.b, z8.b
    __ sve_mul(z4, __ B, p5, z17);                     //	mul	z4.b, p5/m, z4.b, z17.b
    __ sve_neg(z30, __ S, p3, z9);                     //	neg	z30.s, p3/m, z9.s
    __ sve_not(z0, __ D, p3, z20);                     //	not	z0.d, p3/m, z20.d
    __ sve_smax(z23, __ H, p7, z3);                    //	smax	z23.h, p7/m, z23.h, z3.h
    __ sve_smin(z0, __ H, p2, z11);                    //	smin	z0.h, p2/m, z0.h, z11.h
    __ sve_sub(z11, __ D, p6, z5);                     //	sub	z11.d, p6/m, z11.d, z5.d
    __ sve_fabs(z16, __ S, p2, z17);                   //	fabs	z16.s, p2/m, z17.s
    __ sve_fadd(z15, __ S, p0, z26);                   //	fadd	z15.s, p0/m, z15.s, z26.s
    __ sve_fdiv(z10, __ S, p7, z19);                   //	fdiv	z10.s, p7/m, z10.s, z19.s
    __ sve_fmax(z24, __ D, p0, z17);                   //	fmax	z24.d, p0/m, z24.d, z17.d
    __ sve_fmin(z26, __ D, p4, z15);                   //	fmin	z26.d, p4/m, z26.d, z15.d
    __ sve_fmul(z24, __ D, p2, z17);                   //	fmul	z24.d, p2/m, z24.d, z17.d
    __ sve_fneg(z30, __ S, p5, z29);                   //	fneg	z30.s, p5/m, z29.s
    __ sve_frintm(z18, __ S, p5, z10);                 //	frintm	z18.s, p5/m, z10.s
    __ sve_frintn(z30, __ D, p2, z30);                 //	frintn	z30.d, p2/m, z30.d
    __ sve_frintp(z6, __ S, p6, z30);                  //	frintp	z6.s, p6/m, z30.s
    __ sve_fsqrt(z20, __ D, p6, z2);                   //	fsqrt	z20.d, p6/m, z2.d
    __ sve_fsub(z9, __ S, p5, z29);                    //	fsub	z9.s, p5/m, z9.s, z29.s
    __ sve_fmla(z18, __ D, p2, z3, z22);               //	fmla	z18.d, p2/m, z3.d, z22.d
    __ sve_fmls(z15, __ D, p2, z13, z12);              //	fmls	z15.d, p2/m, z13.d, z12.d
    __ sve_fnmla(z12, __ S, p0, z30, z30);             //	fnmla	z12.s, p0/m, z30.s, z30.s
    __ sve_fnmls(z7, __ D, p3, z21, z0);               //	fnmls	z7.d, p3/m, z21.d, z0.d
    __ sve_mla(z19, __ H, p2, z26, z20);               //	mla	z19.h, p2/m, z26.h, z20.h
    __ sve_mls(z16, __ D, p7, z1, z21);                //	mls	z16.d, p7/m, z1.d, z21.d
    __ sve_and(z21, z4, z18);                          //	and	z21.d, z4.d, z18.d
    __ sve_eor(z12, z18, z7);                          //	eor	z12.d, z18.d, z7.d
    __ sve_orr(z25, z15, z13);                         //	orr	z25.d, z15.d, z13.d

// SVEReductionOp
    __ sve_andv(v11, __ D, p4, z7);                    //	andv d11, p4, z7.d
    __ sve_orv(v11, __ D, p1, z9);                     //	orv d11, p1, z9.d
    __ sve_eorv(v28, __ D, p7, z0);                    //	eorv d28, p7, z0.d
    __ sve_smaxv(v16, __ H, p0, z7);                   //	smaxv h16, p0, z7.h
    __ sve_sminv(v12, __ B, p3, z29);                  //	sminv b12, p3, z29.b
    __ sve_fminv(v21, __ S, p6, z11);                  //	fminv s21, p6, z11.s
    __ sve_fmaxv(v6, __ D, p2, z4);                    //	fmaxv d6, p2, z4.d
    __ sve_fadda(v7, __ D, p0, z7);                    //	fadda d7, p0, d7, z7.d
    __ sve_uaddv(v12, __ B, p7, z29);                  //	uaddv d12, p7, z29.b

    __ bind(forth);

/*
aarch64ops.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <back>:
   0:	8b0d82fa 	add	x26, x23, x13, lsl #32
   4:	cb49970c 	sub	x12, x24, x9, lsr #37
   8:	ab889dfc 	adds	x28, x15, x8, asr #39
   c:	eb9ee787 	subs	x7, x28, x30, asr #57
  10:	0b9b3ec9 	add	w9, w22, w27, asr #15
  14:	4b9279a3 	sub	w3, w13, w18, asr #30
  18:	2b88474e 	adds	w14, w26, w8, asr #17
  1c:	6b8c56c0 	subs	w0, w22, w12, asr #21
  20:	8a1a51e0 	and	x0, x15, x26, lsl #20
  24:	aa11f4ba 	orr	x26, x5, x17, lsl #61
  28:	ca0281b8 	eor	x24, x13, x2, lsl #32
  2c:	ea918c7c 	ands	x28, x3, x17, asr #35
  30:	0a5d4a19 	and	w25, w16, w29, lsr #18
  34:	2a4b264d 	orr	w13, w18, w11, lsr #9
  38:	4a523ca5 	eor	w5, w5, w18, lsr #15
  3c:	6a9b6ae2 	ands	w2, w23, w27, asr #26
  40:	8a70b79b 	bic	x27, x28, x16, lsr #45
  44:	aaba9728 	orn	x8, x25, x26, asr #37
  48:	ca6dfe3d 	eon	x29, x17, x13, lsr #63
  4c:	ea627f1c 	bics	x28, x24, x2, lsr #31
  50:	0aa70f53 	bic	w19, w26, w7, asr #3
  54:	2aaa0f06 	orn	w6, w24, w10, asr #3
  58:	4a6176a4 	eon	w4, w21, w1, lsr #29
  5c:	6a604eb0 	bics	w16, w21, w0, lsr #19
  60:	1105ed91 	add	w17, w12, #0x17b
  64:	3100583e 	adds	w30, w1, #0x16
  68:	5101f8bd 	sub	w29, w5, #0x7e
  6c:	710f0306 	subs	w6, w24, #0x3c0
  70:	9101a1a0 	add	x0, x13, #0x68
  74:	b10a5cc8 	adds	x8, x6, #0x297
  78:	d10810aa 	sub	x10, x5, #0x204
  7c:	f10fd061 	subs	x1, x3, #0x3f4
  80:	120cb166 	and	w6, w11, #0xfff1fff1
  84:	321764bc 	orr	w28, w5, #0xfffffe07
  88:	52174681 	eor	w1, w20, #0x7fffe00
  8c:	720c0247 	ands	w7, w18, #0x100000
  90:	9241018e 	and	x14, x12, #0x8000000000000000
  94:	b25a2969 	orr	x9, x11, #0x1ffc000000000
  98:	d278b411 	eor	x17, x0, #0x3fffffffffff00
  9c:	f26aad01 	ands	x1, x8, #0xffffffffffc00003
  a0:	14000000 	b	a0 <back+0xa0>
  a4:	17ffffd7 	b	0 <back>
  a8:	140001cf 	b	7e4 <forth>
  ac:	94000000 	bl	ac <back+0xac>
  b0:	97ffffd4 	bl	0 <back>
  b4:	940001cc 	bl	7e4 <forth>
  b8:	3400000a 	cbz	w10, b8 <back+0xb8>
  bc:	34fffa2a 	cbz	w10, 0 <back>
  c0:	3400392a 	cbz	w10, 7e4 <forth>
  c4:	35000008 	cbnz	w8, c4 <back+0xc4>
  c8:	35fff9c8 	cbnz	w8, 0 <back>
  cc:	350038c8 	cbnz	w8, 7e4 <forth>
  d0:	b400000b 	cbz	x11, d0 <back+0xd0>
  d4:	b4fff96b 	cbz	x11, 0 <back>
  d8:	b400386b 	cbz	x11, 7e4 <forth>
  dc:	b500001d 	cbnz	x29, dc <back+0xdc>
  e0:	b5fff91d 	cbnz	x29, 0 <back>
  e4:	b500381d 	cbnz	x29, 7e4 <forth>
  e8:	10000013 	adr	x19, e8 <back+0xe8>
  ec:	10fff8b3 	adr	x19, 0 <back>
  f0:	100037b3 	adr	x19, 7e4 <forth>
  f4:	90000013 	adrp	x19, 0 <back>
  f8:	36300016 	tbz	w22, #6, f8 <back+0xf8>
  fc:	3637f836 	tbz	w22, #6, 0 <back>
 100:	36303736 	tbz	w22, #6, 7e4 <forth>
 104:	3758000c 	tbnz	w12, #11, 104 <back+0x104>
 108:	375ff7cc 	tbnz	w12, #11, 0 <back>
 10c:	375836cc 	tbnz	w12, #11, 7e4 <forth>
 110:	128313a0 	mov	w0, #0xffffe762            	// #-6302
 114:	528a32c7 	mov	w7, #0x5196                	// #20886
 118:	7289173b 	movk	w27, #0x48b9
 11c:	92ab3acc 	mov	x12, #0xffffffffa629ffff    	// #-1507196929
 120:	d2a0bf94 	mov	x20, #0x5fc0000             	// #100401152
 124:	f2c285e8 	movk	x8, #0x142f, lsl #32
 128:	9358722f 	sbfx	x15, x17, #24, #5
 12c:	330e652f 	bfxil	w15, w9, #14, #12
 130:	53067f3b 	lsr	w27, w25, #6
 134:	93577c53 	sbfx	x19, x2, #23, #9
 138:	b34a1aac 	bfi	x12, x21, #54, #7
 13c:	d35a4016 	ubfiz	x22, x0, #38, #17
 140:	13946c63 	extr	w3, w3, w20, #27
 144:	93c3dbc8 	extr	x8, x30, x3, #54
 148:	54000000 	b.eq	148 <back+0x148>  // b.none
 14c:	54fff5a0 	b.eq	0 <back>  // b.none
 150:	540034a0 	b.eq	7e4 <forth>  // b.none
 154:	54000001 	b.ne	154 <back+0x154>  // b.any
 158:	54fff541 	b.ne	0 <back>  // b.any
 15c:	54003441 	b.ne	7e4 <forth>  // b.any
 160:	54000002 	b.cs	160 <back+0x160>  // b.hs, b.nlast
 164:	54fff4e2 	b.cs	0 <back>  // b.hs, b.nlast
 168:	540033e2 	b.cs	7e4 <forth>  // b.hs, b.nlast
 16c:	54000002 	b.cs	16c <back+0x16c>  // b.hs, b.nlast
 170:	54fff482 	b.cs	0 <back>  // b.hs, b.nlast
 174:	54003382 	b.cs	7e4 <forth>  // b.hs, b.nlast
 178:	54000003 	b.cc	178 <back+0x178>  // b.lo, b.ul, b.last
 17c:	54fff423 	b.cc	0 <back>  // b.lo, b.ul, b.last
 180:	54003323 	b.cc	7e4 <forth>  // b.lo, b.ul, b.last
 184:	54000003 	b.cc	184 <back+0x184>  // b.lo, b.ul, b.last
 188:	54fff3c3 	b.cc	0 <back>  // b.lo, b.ul, b.last
 18c:	540032c3 	b.cc	7e4 <forth>  // b.lo, b.ul, b.last
 190:	54000004 	b.mi	190 <back+0x190>  // b.first
 194:	54fff364 	b.mi	0 <back>  // b.first
 198:	54003264 	b.mi	7e4 <forth>  // b.first
 19c:	54000005 	b.pl	19c <back+0x19c>  // b.nfrst
 1a0:	54fff305 	b.pl	0 <back>  // b.nfrst
 1a4:	54003205 	b.pl	7e4 <forth>  // b.nfrst
 1a8:	54000006 	b.vs	1a8 <back+0x1a8>
 1ac:	54fff2a6 	b.vs	0 <back>
 1b0:	540031a6 	b.vs	7e4 <forth>
 1b4:	54000007 	b.vc	1b4 <back+0x1b4>
 1b8:	54fff247 	b.vc	0 <back>
 1bc:	54003147 	b.vc	7e4 <forth>
 1c0:	54000008 	b.hi	1c0 <back+0x1c0>  // b.pmore
 1c4:	54fff1e8 	b.hi	0 <back>  // b.pmore
 1c8:	540030e8 	b.hi	7e4 <forth>  // b.pmore
 1cc:	54000009 	b.ls	1cc <back+0x1cc>  // b.plast
 1d0:	54fff189 	b.ls	0 <back>  // b.plast
 1d4:	54003089 	b.ls	7e4 <forth>  // b.plast
 1d8:	5400000a 	b.ge	1d8 <back+0x1d8>  // b.tcont
 1dc:	54fff12a 	b.ge	0 <back>  // b.tcont
 1e0:	5400302a 	b.ge	7e4 <forth>  // b.tcont
 1e4:	5400000b 	b.lt	1e4 <back+0x1e4>  // b.tstop
 1e8:	54fff0cb 	b.lt	0 <back>  // b.tstop
 1ec:	54002fcb 	b.lt	7e4 <forth>  // b.tstop
 1f0:	5400000c 	b.gt	1f0 <back+0x1f0>
 1f4:	54fff06c 	b.gt	0 <back>
 1f8:	54002f6c 	b.gt	7e4 <forth>
 1fc:	5400000d 	b.le	1fc <back+0x1fc>
 200:	54fff00d 	b.le	0 <back>
 204:	54002f0d 	b.le	7e4 <forth>
 208:	5400000e 	b.al	208 <back+0x208>
 20c:	54ffefae 	b.al	0 <back>
 210:	54002eae 	b.al	7e4 <forth>
 214:	5400000f 	b.nv	214 <back+0x214>
 218:	54ffef4f 	b.nv	0 <back>
 21c:	54002e4f 	b.nv	7e4 <forth>
 220:	d40658e1 	svc	#0x32c7
 224:	d4014d22 	hvc	#0xa69
 228:	d4046543 	smc	#0x232a
 22c:	d4273f60 	brk	#0x39fb
 230:	d44cad80 	hlt	#0x656c
 234:	d503201f 	nop
 238:	d69f03e0 	eret
 23c:	d6bf03e0 	drps
 240:	d5033fdf 	isb
 244:	d5033e9f 	dsb	st
 248:	d50332bf 	dmb	oshst
 24c:	d61f0200 	br	x16
 250:	d63f0280 	blr	x20
 254:	c80a7d1b 	stxr	w10, x27, [x8]
 258:	c800fea1 	stlxr	w0, x1, [x21]
 25c:	c85f7fb1 	ldxr	x17, [x29]
 260:	c85fff9d 	ldaxr	x29, [x28]
 264:	c89ffee1 	stlr	x1, [x23]
 268:	c8dffe95 	ldar	x21, [x20]
 26c:	88167e7b 	stxr	w22, w27, [x19]
 270:	880bfcd0 	stlxr	w11, w16, [x6]
 274:	885f7c12 	ldxr	w18, [x0]
 278:	885ffd44 	ldaxr	w4, [x10]
 27c:	889ffed8 	stlr	w24, [x22]
 280:	88dffe6a 	ldar	w10, [x19]
 284:	48017fc5 	stxrh	w1, w5, [x30]
 288:	4808fe2c 	stlxrh	w8, w12, [x17]
 28c:	485f7dc9 	ldxrh	w9, [x14]
 290:	485ffc27 	ldaxrh	w7, [x1]
 294:	489ffe05 	stlrh	w5, [x16]
 298:	48dffd82 	ldarh	w2, [x12]
 29c:	080a7c6c 	stxrb	w10, w12, [x3]
 2a0:	081cff4e 	stlxrb	w28, w14, [x26]
 2a4:	085f7d5e 	ldxrb	w30, [x10]
 2a8:	085ffeae 	ldaxrb	w14, [x21]
 2ac:	089ffd2d 	stlrb	w13, [x9]
 2b0:	08dfff76 	ldarb	w22, [x27]
 2b4:	c87f4d7c 	ldxp	x28, x19, [x11]
 2b8:	c87fcc5e 	ldaxp	x30, x19, [x2]
 2bc:	c8220417 	stxp	w2, x23, x1, [x0]
 2c0:	c82cb5f0 	stlxp	w12, x16, x13, [x15]
 2c4:	887f55b2 	ldxp	w18, w21, [x13]
 2c8:	887ff90b 	ldaxp	w11, w30, [x8]
 2cc:	88382c2d 	stxp	w24, w13, w11, [x1]
 2d0:	883aedb5 	stlxp	w26, w21, w27, [x13]
 2d4:	f819928b 	stur	x11, [x20, #-103]
 2d8:	b803e21c 	stur	w28, [x16, #62]
 2dc:	381f713b 	sturb	w27, [x9, #-9]
 2e0:	781ce322 	sturh	w2, [x25, #-50]
 2e4:	f850f044 	ldur	x4, [x2, #-241]
 2e8:	b85e129e 	ldur	w30, [x20, #-31]
 2ec:	385e92f2 	ldurb	w18, [x23, #-23]
 2f0:	785ff35d 	ldurh	w29, [x26, #-1]
 2f4:	39801921 	ldrsb	x1, [x9, #6]
 2f8:	7881318b 	ldursh	x11, [x12, #19]
 2fc:	78dce02b 	ldursh	w11, [x1, #-50]
 300:	b8829313 	ldursw	x19, [x24, #41]
 304:	fc45f318 	ldur	d24, [x24, #95]
 308:	bc5d50af 	ldur	s15, [x5, #-43]
 30c:	fc001375 	stur	d21, [x27, #1]
 310:	bc1951b7 	stur	s23, [x13, #-107]
 314:	f8008c0b 	str	x11, [x0, #8]!
 318:	b801dc03 	str	w3, [x0, #29]!
 31c:	38009dcb 	strb	w11, [x14, #9]!
 320:	781fdf1d 	strh	w29, [x24, #-3]!
 324:	f8570e2d 	ldr	x13, [x17, #-144]!
 328:	b85faecc 	ldr	w12, [x22, #-6]!
 32c:	385f6d8d 	ldrb	w13, [x12, #-10]!
 330:	785ebea0 	ldrh	w0, [x21, #-21]!
 334:	38804cf7 	ldrsb	x23, [x7, #4]!
 338:	789cbce3 	ldrsh	x3, [x7, #-53]!
 33c:	78df9cbc 	ldrsh	w28, [x5, #-7]!
 340:	b89eed38 	ldrsw	x24, [x9, #-18]!
 344:	fc40cd6e 	ldr	d14, [x11, #12]!
 348:	bc5bdd93 	ldr	s19, [x12, #-67]!
 34c:	fc103c14 	str	d20, [x0, #-253]!
 350:	bc040c08 	str	s8, [x0, #64]!
 354:	f81a2784 	str	x4, [x28], #-94
 358:	b81ca4ec 	str	w12, [x7], #-54
 35c:	381e855b 	strb	w27, [x10], #-24
 360:	7801b506 	strh	w6, [x8], #27
 364:	f853654e 	ldr	x14, [x10], #-202
 368:	b85d74b0 	ldr	w16, [x5], #-41
 36c:	384095c2 	ldrb	w2, [x14], #9
 370:	785ec5bc 	ldrh	w28, [x13], #-20
 374:	389e15a9 	ldrsb	x9, [x13], #-31
 378:	789dc703 	ldrsh	x3, [x24], #-36
 37c:	78c06474 	ldrsh	w20, [x3], #6
 380:	b89ff667 	ldrsw	x7, [x19], #-1
 384:	fc57e51e 	ldr	d30, [x8], #-130
 388:	bc4155f9 	ldr	s25, [x15], #21
 38c:	fc05a6ee 	str	d14, [x23], #90
 390:	bc1df408 	str	s8, [x0], #-33
 394:	f835da4a 	str	x10, [x18, w21, sxtw #3]
 398:	b836d9a4 	str	w4, [x13, w22, sxtw #2]
 39c:	3833580d 	strb	w13, [x0, w19, uxtw #0]
 3a0:	7826cb6c 	strh	w12, [x27, w6, sxtw]
 3a4:	f8706900 	ldr	x0, [x8, x16]
 3a8:	b87ae880 	ldr	w0, [x4, x26, sxtx]
 3ac:	3865db2e 	ldrb	w14, [x25, w5, sxtw #0]
 3b0:	78724889 	ldrh	w9, [x4, w18, uxtw]
 3b4:	38a7789b 	ldrsb	x27, [x4, x7, lsl #0]
 3b8:	78beca2f 	ldrsh	x15, [x17, w30, sxtw]
 3bc:	78f6c810 	ldrsh	w16, [x0, w22, sxtw]
 3c0:	b8bef956 	ldrsw	x22, [x10, x30, sxtx #2]
 3c4:	fc6afabd 	ldr	d29, [x21, x10, sxtx #3]
 3c8:	bc734963 	ldr	s3, [x11, w19, uxtw]
 3cc:	fc3d5b8d 	str	d13, [x28, w29, uxtw #3]
 3d0:	bc25fbb7 	str	s23, [x29, x5, sxtx #2]
 3d4:	f9189d05 	str	x5, [x8, #12600]
 3d8:	b91ecb1d 	str	w29, [x24, #7880]
 3dc:	39187a33 	strb	w19, [x17, #1566]
 3e0:	791f226d 	strh	w13, [x19, #3984]
 3e4:	f95aa2f3 	ldr	x19, [x23, #13632]
 3e8:	b9587bb7 	ldr	w23, [x29, #6264]
 3ec:	395f7176 	ldrb	w22, [x11, #2012]
 3f0:	795d9143 	ldrh	w3, [x10, #3784]
 3f4:	399e7e08 	ldrsb	x8, [x16, #1951]
 3f8:	799a2697 	ldrsh	x23, [x20, #3346]
 3fc:	79df3422 	ldrsh	w2, [x1, #3994]
 400:	b99c2624 	ldrsw	x4, [x17, #7204]
 404:	fd5c2374 	ldr	d20, [x27, #14400]
 408:	bd5fa1d9 	ldr	s25, [x14, #8096]
 40c:	fd1d595a 	str	d26, [x10, #15024]
 410:	bd1b1869 	str	s9, [x3, #6936]
 414:	58001e9b 	ldr	x27, 7e4 <forth>
 418:	1800000b 	ldr	w11, 418 <back+0x418>
 41c:	f8945060 	prfum	pldl1keep, [x3, #-187]
 420:	d8000000 	prfm	pldl1keep, 420 <back+0x420>
 424:	f8ae6ba0 	prfm	pldl1keep, [x29, x14]
 428:	f99a0080 	prfm	pldl1keep, [x4, #13312]
 42c:	1a070035 	adc	w21, w1, w7
 430:	3a0700a8 	adcs	w8, w5, w7
 434:	5a0e0367 	sbc	w7, w27, w14
 438:	7a11009b 	sbcs	w27, w4, w17
 43c:	9a000380 	adc	x0, x28, x0
 440:	ba1e030c 	adcs	x12, x24, x30
 444:	da0f0320 	sbc	x0, x25, x15
 448:	fa030301 	sbcs	x1, x24, x3
 44c:	0b340b12 	add	w18, w24, w20, uxtb #2
 450:	2b2a278d 	adds	w13, w28, w10, uxth #1
 454:	cb22aa0f 	sub	x15, x16, w2, sxth #2
 458:	6b2d29bd 	subs	w29, w13, w13, uxth #2
 45c:	8b2cce8c 	add	x12, x20, w12, sxtw #3
 460:	ab2b877e 	adds	x30, x27, w11, sxtb #1
 464:	cb21c8ee 	sub	x14, x7, w1, sxtw #2
 468:	eb3ba47d 	subs	x29, x3, w27, sxth #1
 46c:	3a4d400e 	ccmn	w0, w13, #0xe, mi  // mi = first
 470:	7a5232c6 	ccmp	w22, w18, #0x6, cc  // cc = lo, ul, last
 474:	ba5e624e 	ccmn	x18, x30, #0xe, vs
 478:	fa53814c 	ccmp	x10, x19, #0xc, hi  // hi = pmore
 47c:	3a52d8c2 	ccmn	w6, #0x12, #0x2, le
 480:	7a4d8924 	ccmp	w9, #0xd, #0x4, hi  // hi = pmore
 484:	ba4b3aab 	ccmn	x21, #0xb, #0xb, cc  // cc = lo, ul, last
 488:	fa4d7882 	ccmp	x4, #0xd, #0x2, vc
 48c:	1a96804c 	csel	w12, w2, w22, hi  // hi = pmore
 490:	1a912618 	csinc	w24, w16, w17, cs  // cs = hs, nlast
 494:	5a90b0e6 	csinv	w6, w7, w16, lt  // lt = tstop
 498:	5a96976b 	csneg	w11, w27, w22, ls  // ls = plast
 49c:	9a9db06a 	csel	x10, x3, x29, lt  // lt = tstop
 4a0:	9a9b374c 	csinc	x12, x26, x27, cc  // cc = lo, ul, last
 4a4:	da95c14f 	csinv	x15, x10, x21, gt
 4a8:	da89c6fe 	csneg	x30, x23, x9, gt
 4ac:	5ac0015e 	rbit	w30, w10
 4b0:	5ac005fd 	rev16	w29, w15
 4b4:	5ac00bdd 	rev	w29, w30
 4b8:	5ac012b9 	clz	w25, w21
 4bc:	5ac01404 	cls	w4, w0
 4c0:	dac002b2 	rbit	x18, x21
 4c4:	dac0061d 	rev16	x29, x16
 4c8:	dac00a95 	rev32	x21, x20
 4cc:	dac00e66 	rev	x6, x19
 4d0:	dac0107e 	clz	x30, x3
 4d4:	dac01675 	cls	x21, x19
 4d8:	1ac00b0b 	udiv	w11, w24, w0
 4dc:	1ace0f3b 	sdiv	w27, w25, w14
 4e0:	1ad221c3 	lsl	w3, w14, w18
 4e4:	1ad825e7 	lsr	w7, w15, w24
 4e8:	1ad92a3c 	asr	w28, w17, w25
 4ec:	1adc2f42 	ror	w2, w26, w28
 4f0:	9ada0b25 	udiv	x5, x25, x26
 4f4:	9ad20e1b 	sdiv	x27, x16, x18
 4f8:	9acc22a6 	lsl	x6, x21, x12
 4fc:	9acc2480 	lsr	x0, x4, x12
 500:	9adc2a3b 	asr	x27, x17, x28
 504:	9ad22c5c 	ror	x28, x2, x18
 508:	1b0e39ea 	madd	w10, w15, w14, w14
 50c:	1b0fcf23 	msub	w3, w25, w15, w19
 510:	9b1010ae 	madd	x14, x5, x16, x4
 514:	9b048b3a 	msub	x26, x25, x4, x2
 518:	9b3d4582 	smaddl	x2, w12, w29, x17
 51c:	9b2390e8 	smsubl	x8, w7, w3, x4
 520:	9bba6499 	umaddl	x25, w4, w26, x25
 524:	9ba0ea24 	umsubl	x4, w17, w0, x26
 528:	1e2f0af1 	fmul	s17, s23, s15
 52c:	1e311b95 	fdiv	s21, s28, s17
 530:	1e23295b 	fadd	s27, s10, s3
 534:	1e3938e0 	fsub	s0, s7, s25
 538:	1e2f08c9 	fmul	s9, s6, s15
 53c:	1e6a09fd 	fmul	d29, d15, d10
 540:	1e671a22 	fdiv	d2, d17, d7
 544:	1e77296b 	fadd	d11, d11, d23
 548:	1e773ba7 	fsub	d7, d29, d23
 54c:	1e6b0b6e 	fmul	d14, d27, d11
 550:	1f18308b 	fmadd	s11, s4, s24, s12
 554:	1f14adcf 	fmsub	s15, s14, s20, s11
 558:	1f2b31bc 	nmadd	s28, s13, s11, s12
 55c:	1f3a3bd7 	fnmadd	s23, s30, s26, s14
 560:	1f4a1da9 	fmadd	d9, d13, d10, d7
 564:	1f4f8fa5 	fmsub	d5, d29, d15, d3
 568:	1f6f798b 	fnmadd	d11, d12, d15, d30
 56c:	1f73523e 	fnmadd	d30, d17, d19, d20
 570:	1e2040fb 	fmov	s27, s7
 574:	1e20c2a9 	fabs	s9, s21
 578:	1e214122 	fneg	s2, s9
 57c:	1e21c0fb 	fsqrt	s27, s7
 580:	1e22c3dd 	fcvt	d29, s30
 584:	1e604031 	fmov	d17, d1
 588:	1e60c0c2 	fabs	d2, d6
 58c:	1e61406a 	fneg	d10, d3
 590:	1e61c178 	fsqrt	d24, d11
 594:	1e624027 	fcvt	s7, d1
 598:	1e38000b 	fcvtzs	w11, s0
 59c:	9e380243 	fcvtzs	x3, s18
 5a0:	1e7800dc 	fcvtzs	w28, d6
 5a4:	9e7800d6 	fcvtzs	x22, d6
 5a8:	1e220360 	scvtf	s0, w27
 5ac:	9e22005a 	scvtf	s26, x2
 5b0:	1e6200e5 	scvtf	d5, w7
 5b4:	9e62017c 	scvtf	d28, x11
 5b8:	1e2601b9 	fmov	w25, s13
 5bc:	9e6602eb 	fmov	x11, d23
 5c0:	1e270113 	fmov	s19, w8
 5c4:	9e6702b2 	fmov	d18, x21
 5c8:	1e342320 	fcmp	s25, s20
 5cc:	1e722260 	fcmp	d19, d18
 5d0:	1e202048 	fcmp	s2, #0.0
 5d4:	1e6023a8 	fcmp	d29, #0.0
 5d8:	29025668 	stp	w8, w21, [x19, #16]
 5dc:	29403e86 	ldp	w6, w15, [x20]
 5e0:	6966387b 	ldpsw	x27, x14, [x3, #-208]
 5e4:	a93b316a 	stp	x10, x12, [x11, #-80]
 5e8:	a97e38e7 	ldp	x7, x14, [x7, #-32]
 5ec:	298e5980 	stp	w0, w22, [x12, #112]!
 5f0:	29c61d0e 	ldp	w14, w7, [x8, #48]!
 5f4:	69c00930 	ldpsw	x16, x2, [x9, #0]!
 5f8:	a9bc7434 	stp	x20, x29, [x1, #-64]!
 5fc:	a9c530b5 	ldp	x21, x12, [x5, #80]!
 600:	28b26378 	stp	w24, w24, [x27], #-112
 604:	28c25a5c 	ldp	w28, w22, [x18], #16
 608:	68f419b1 	ldpsw	x17, x6, [x13], #-96
 60c:	a8b668bc 	stp	x28, x26, [x5], #-160
 610:	a8f15746 	ldp	x6, x21, [x26], #-240
 614:	280453cd 	stnp	w13, w20, [x30, #32]
 618:	284c2cb1 	ldnp	w17, w11, [x5, #96]
 61c:	a83a534d 	stnp	x13, x20, [x26, #-96]
 620:	a87b32fd 	ldnp	x29, x12, [x23, #-80]
 624:	05a08020 	mov	z0.s, p0/m, s1
 628:	04b0e3e0 	incw	x0
 62c:	0470e7e1 	dech	x1
 630:	042f9c20 	lsl	z0.b, z1.b, #7
 634:	043f9c35 	lsl	z21.h, z1.h, #15
 638:	047f9c20 	lsl	z0.s, z1.s, #31
 63c:	04ff9c20 	lsl	z0.d, z1.d, #63
 640:	04299420 	lsr	z0.b, z1.b, #7
 644:	04319160 	asr	z0.h, z11.h, #15
 648:	0461943e 	lsr	z30.s, z1.s, #31
 64c:	04a19020 	asr	z0.d, z1.d, #63
 650:	042053ff 	addvl	sp, x0, #31
 654:	047f5401 	addpl	x1, sp, #-32
 658:	25208028 	cntp	x8, p0, p1.b
 65c:	2538cfe0 	mov	z0.b, #127
 660:	2578d001 	mov	z1.h, #-128
 664:	25b8efe2 	mov	z2.s, #32512
 668:	25f8f007 	mov	z7.d, #-32768
 66c:	a400a3e0 	ld1b	{z0.b}, p0/z, [sp]
 670:	a4a8a7ea 	ld1h	{z10.h}, p1/z, [sp, #-8, mul vl]
 674:	a547a814 	ld1w	{z20.s}, p2/z, [x0, #7, mul vl]
 678:	a4084ffe 	ld1b	{z30.b}, p3/z, [sp, x8]
 67c:	a55c53e0 	ld1w	{z0.s}, p4/z, [sp, x28, lsl #2]
 680:	a5e1540b 	ld1d	{z11.d}, p5/z, [x0, x1, lsl #3]
 684:	e400fbf6 	st1b	{z22.b}, p6, [sp]
 688:	e408ffff 	st1b	{z31.b}, p7, [sp, #-8, mul vl]
 68c:	e547e400 	st1w	{z0.s}, p1, [x0, #7, mul vl]
 690:	e4014be0 	st1b	{z0.b}, p2, [sp, x1]
 694:	e4a84fe0 	st1h	{z0.h}, p3, [sp, x8, lsl #1]
 698:	e5f25000 	st1d	{z0.d}, p4, [x0, x18, lsl #3]
 69c:	858043e0 	ldr	z0, [sp]
 6a0:	85a043ff 	ldr	z31, [sp, #-256, mul vl]
 6a4:	e59f5d08 	str	z8, [x8, #255, mul vl]
 6a8:	1e601000 	fmov	d0, #2.000000000000000000e+00
 6ac:	1e603000 	fmov	d0, #2.125000000000000000e+00
 6b0:	1e621000 	fmov	d0, #4.000000000000000000e+00
 6b4:	1e623000 	fmov	d0, #4.250000000000000000e+00
 6b8:	1e641000 	fmov	d0, #8.000000000000000000e+00
 6bc:	1e643000 	fmov	d0, #8.500000000000000000e+00
 6c0:	1e661000 	fmov	d0, #1.600000000000000000e+01
 6c4:	1e663000 	fmov	d0, #1.700000000000000000e+01
 6c8:	1e681000 	fmov	d0, #1.250000000000000000e-01
 6cc:	1e683000 	fmov	d0, #1.328125000000000000e-01
 6d0:	1e6a1000 	fmov	d0, #2.500000000000000000e-01
 6d4:	1e6a3000 	fmov	d0, #2.656250000000000000e-01
 6d8:	1e6c1000 	fmov	d0, #5.000000000000000000e-01
 6dc:	1e6c3000 	fmov	d0, #5.312500000000000000e-01
 6e0:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
 6e4:	1e6e3000 	fmov	d0, #1.062500000000000000e+00
 6e8:	1e701000 	fmov	d0, #-2.000000000000000000e+00
 6ec:	1e703000 	fmov	d0, #-2.125000000000000000e+00
 6f0:	1e721000 	fmov	d0, #-4.000000000000000000e+00
 6f4:	1e723000 	fmov	d0, #-4.250000000000000000e+00
 6f8:	1e741000 	fmov	d0, #-8.000000000000000000e+00
 6fc:	1e743000 	fmov	d0, #-8.500000000000000000e+00
 700:	1e761000 	fmov	d0, #-1.600000000000000000e+01
 704:	1e763000 	fmov	d0, #-1.700000000000000000e+01
 708:	1e781000 	fmov	d0, #-1.250000000000000000e-01
 70c:	1e783000 	fmov	d0, #-1.328125000000000000e-01
 710:	1e7a1000 	fmov	d0, #-2.500000000000000000e-01
 714:	1e7a3000 	fmov	d0, #-2.656250000000000000e-01
 718:	1e7c1000 	fmov	d0, #-5.000000000000000000e-01
 71c:	1e7c3000 	fmov	d0, #-5.312500000000000000e-01
 720:	1e7e1000 	fmov	d0, #-1.000000000000000000e+00
 724:	1e7e3000 	fmov	d0, #-1.062500000000000000e+00
 728:	04bb020e 	add	z14.s, z16.s, z27.s
 72c:	04ba04c0 	sub	z0.s, z6.s, z26.s
 730:	6586019b 	fadd	z27.s, z12.s, z6.s
 734:	6593089e 	fmul	z30.s, z4.s, z19.s
 738:	65c2060b 	fsub	z11.d, z16.d, z2.d
 73c:	04d6a18f 	abs	z15.d, p0/m, z12.d
 740:	040016e9 	add	z9.b, p5/m, z9.b, z23.b
 744:	0490835e 	asr	z30.s, p0/m, z30.s, z26.s
 748:	045aaa44 	cnt	z4.h, p2/m, z18.h
 74c:	04938579 	lsl	z25.s, p1/m, z25.s, z11.s
 750:	0411990a 	lsr	z10.b, p6/m, z10.b, z8.b
 754:	04101624 	mul	z4.b, p5/m, z4.b, z17.b
 758:	0497ad3e 	neg	z30.s, p3/m, z9.s
 75c:	04deae80 	not	z0.d, p3/m, z20.d
 760:	04481c77 	smax	z23.h, p7/m, z23.h, z3.h
 764:	044a0960 	smin	z0.h, p2/m, z0.h, z11.h
 768:	04c118ab 	sub	z11.d, p6/m, z11.d, z5.d
 76c:	049caa30 	fabs	z16.s, p2/m, z17.s
 770:	6580834f 	fadd	z15.s, p0/m, z15.s, z26.s
 774:	658d9e6a 	fdiv	z10.s, p7/m, z10.s, z19.s
 778:	65c68238 	fmax	z24.d, p0/m, z24.d, z17.d
 77c:	65c791fa 	fmin	z26.d, p4/m, z26.d, z15.d
 780:	65c28a38 	fmul	z24.d, p2/m, z24.d, z17.d
 784:	049db7be 	fneg	z30.s, p5/m, z29.s
 788:	6582b552 	frintm	z18.s, p5/m, z10.s
 78c:	65c0abde 	frintn	z30.d, p2/m, z30.d
 790:	6581bbc6 	frintp	z6.s, p6/m, z30.s
 794:	65cdb854 	fsqrt	z20.d, p6/m, z2.d
 798:	658197a9 	fsub	z9.s, p5/m, z9.s, z29.s
 79c:	65f60872 	fmla	z18.d, p2/m, z3.d, z22.d
 7a0:	65ec29af 	fmls	z15.d, p2/m, z13.d, z12.d
 7a4:	65be43cc 	fnmla	z12.s, p0/m, z30.s, z30.s
 7a8:	65e06ea7 	fnmls	z7.d, p3/m, z21.d, z0.d
 7ac:	04544b53 	mla	z19.h, p2/m, z26.h, z20.h
 7b0:	04d57c30 	mls	z16.d, p7/m, z1.d, z21.d
 7b4:	04323095 	and	z21.d, z4.d, z18.d
 7b8:	04a7324c 	eor	z12.d, z18.d, z7.d
 7bc:	046d31f9 	orr	z25.d, z15.d, z13.d
 7c0:	04da30eb 	andv	d11, p4, z7.d
 7c4:	04d8252b 	orv	d11, p1, z9.d
 7c8:	04d93c1c 	eorv	d28, p7, z0.d
 7cc:	044820f0 	smaxv	h16, p0, z7.h
 7d0:	040a2fac 	sminv	b12, p3, z29.b
 7d4:	65873975 	fminv	s21, p6, z11.s
 7d8:	65c62886 	fmaxv	d6, p2, z4.d
 7dc:	65d820e7 	fadda	d7, p0, d7, z7.d
 7e0:	04013fac 	uaddv	d12, p7, z29.b
 */

  static const unsigned int insns[] =
  {
    0x8b0d82fa,     0xcb49970c,     0xab889dfc,     0xeb9ee787,
    0x0b9b3ec9,     0x4b9279a3,     0x2b88474e,     0x6b8c56c0,
    0x8a1a51e0,     0xaa11f4ba,     0xca0281b8,     0xea918c7c,
    0x0a5d4a19,     0x2a4b264d,     0x4a523ca5,     0x6a9b6ae2,
    0x8a70b79b,     0xaaba9728,     0xca6dfe3d,     0xea627f1c,
    0x0aa70f53,     0x2aaa0f06,     0x4a6176a4,     0x6a604eb0,
    0x1105ed91,     0x3100583e,     0x5101f8bd,     0x710f0306,
    0x9101a1a0,     0xb10a5cc8,     0xd10810aa,     0xf10fd061,
    0x120cb166,     0x321764bc,     0x52174681,     0x720c0247,
    0x9241018e,     0xb25a2969,     0xd278b411,     0xf26aad01,
    0x14000000,     0x17ffffd7,     0x140001cf,     0x94000000,
    0x97ffffd4,     0x940001cc,     0x3400000a,     0x34fffa2a,
    0x3400392a,     0x35000008,     0x35fff9c8,     0x350038c8,
    0xb400000b,     0xb4fff96b,     0xb400386b,     0xb500001d,
    0xb5fff91d,     0xb500381d,     0x10000013,     0x10fff8b3,
    0x100037b3,     0x90000013,     0x36300016,     0x3637f836,
    0x36303736,     0x3758000c,     0x375ff7cc,     0x375836cc,
    0x128313a0,     0x528a32c7,     0x7289173b,     0x92ab3acc,
    0xd2a0bf94,     0xf2c285e8,     0x9358722f,     0x330e652f,
    0x53067f3b,     0x93577c53,     0xb34a1aac,     0xd35a4016,
    0x13946c63,     0x93c3dbc8,     0x54000000,     0x54fff5a0,
    0x540034a0,     0x54000001,     0x54fff541,     0x54003441,
    0x54000002,     0x54fff4e2,     0x540033e2,     0x54000002,
    0x54fff482,     0x54003382,     0x54000003,     0x54fff423,
    0x54003323,     0x54000003,     0x54fff3c3,     0x540032c3,
    0x54000004,     0x54fff364,     0x54003264,     0x54000005,
    0x54fff305,     0x54003205,     0x54000006,     0x54fff2a6,
    0x540031a6,     0x54000007,     0x54fff247,     0x54003147,
    0x54000008,     0x54fff1e8,     0x540030e8,     0x54000009,
    0x54fff189,     0x54003089,     0x5400000a,     0x54fff12a,
    0x5400302a,     0x5400000b,     0x54fff0cb,     0x54002fcb,
    0x5400000c,     0x54fff06c,     0x54002f6c,     0x5400000d,
    0x54fff00d,     0x54002f0d,     0x5400000e,     0x54ffefae,
    0x54002eae,     0x5400000f,     0x54ffef4f,     0x54002e4f,
    0xd40658e1,     0xd4014d22,     0xd4046543,     0xd4273f60,
    0xd44cad80,     0xd503201f,     0xd69f03e0,     0xd6bf03e0,
    0xd5033fdf,     0xd5033e9f,     0xd50332bf,     0xd61f0200,
    0xd63f0280,     0xc80a7d1b,     0xc800fea1,     0xc85f7fb1,
    0xc85fff9d,     0xc89ffee1,     0xc8dffe95,     0x88167e7b,
    0x880bfcd0,     0x885f7c12,     0x885ffd44,     0x889ffed8,
    0x88dffe6a,     0x48017fc5,     0x4808fe2c,     0x485f7dc9,
    0x485ffc27,     0x489ffe05,     0x48dffd82,     0x080a7c6c,
    0x081cff4e,     0x085f7d5e,     0x085ffeae,     0x089ffd2d,
    0x08dfff76,     0xc87f4d7c,     0xc87fcc5e,     0xc8220417,
    0xc82cb5f0,     0x887f55b2,     0x887ff90b,     0x88382c2d,
    0x883aedb5,     0xf819928b,     0xb803e21c,     0x381f713b,
    0x781ce322,     0xf850f044,     0xb85e129e,     0x385e92f2,
    0x785ff35d,     0x39801921,     0x7881318b,     0x78dce02b,
    0xb8829313,     0xfc45f318,     0xbc5d50af,     0xfc001375,
    0xbc1951b7,     0xf8008c0b,     0xb801dc03,     0x38009dcb,
    0x781fdf1d,     0xf8570e2d,     0xb85faecc,     0x385f6d8d,
    0x785ebea0,     0x38804cf7,     0x789cbce3,     0x78df9cbc,
    0xb89eed38,     0xfc40cd6e,     0xbc5bdd93,     0xfc103c14,
    0xbc040c08,     0xf81a2784,     0xb81ca4ec,     0x381e855b,
    0x7801b506,     0xf853654e,     0xb85d74b0,     0x384095c2,
    0x785ec5bc,     0x389e15a9,     0x789dc703,     0x78c06474,
    0xb89ff667,     0xfc57e51e,     0xbc4155f9,     0xfc05a6ee,
    0xbc1df408,     0xf835da4a,     0xb836d9a4,     0x3833580d,
    0x7826cb6c,     0xf8706900,     0xb87ae880,     0x3865db2e,
    0x78724889,     0x38a7789b,     0x78beca2f,     0x78f6c810,
    0xb8bef956,     0xfc6afabd,     0xbc734963,     0xfc3d5b8d,
    0xbc25fbb7,     0xf9189d05,     0xb91ecb1d,     0x39187a33,
    0x791f226d,     0xf95aa2f3,     0xb9587bb7,     0x395f7176,
    0x795d9143,     0x399e7e08,     0x799a2697,     0x79df3422,
    0xb99c2624,     0xfd5c2374,     0xbd5fa1d9,     0xfd1d595a,
    0xbd1b1869,     0x58001e9b,     0x1800000b,     0xf8945060,
    0xd8000000,     0xf8ae6ba0,     0xf99a0080,     0x1a070035,
    0x3a0700a8,     0x5a0e0367,     0x7a11009b,     0x9a000380,
    0xba1e030c,     0xda0f0320,     0xfa030301,     0x0b340b12,
    0x2b2a278d,     0xcb22aa0f,     0x6b2d29bd,     0x8b2cce8c,
    0xab2b877e,     0xcb21c8ee,     0xeb3ba47d,     0x3a4d400e,
    0x7a5232c6,     0xba5e624e,     0xfa53814c,     0x3a52d8c2,
    0x7a4d8924,     0xba4b3aab,     0xfa4d7882,     0x1a96804c,
    0x1a912618,     0x5a90b0e6,     0x5a96976b,     0x9a9db06a,
    0x9a9b374c,     0xda95c14f,     0xda89c6fe,     0x5ac0015e,
    0x5ac005fd,     0x5ac00bdd,     0x5ac012b9,     0x5ac01404,
    0xdac002b2,     0xdac0061d,     0xdac00a95,     0xdac00e66,
    0xdac0107e,     0xdac01675,     0x1ac00b0b,     0x1ace0f3b,
    0x1ad221c3,     0x1ad825e7,     0x1ad92a3c,     0x1adc2f42,
    0x9ada0b25,     0x9ad20e1b,     0x9acc22a6,     0x9acc2480,
    0x9adc2a3b,     0x9ad22c5c,     0x1b0e39ea,     0x1b0fcf23,
    0x9b1010ae,     0x9b048b3a,     0x9b3d4582,     0x9b2390e8,
    0x9bba6499,     0x9ba0ea24,     0x1e2f0af1,     0x1e311b95,
    0x1e23295b,     0x1e3938e0,     0x1e2f08c9,     0x1e6a09fd,
    0x1e671a22,     0x1e77296b,     0x1e773ba7,     0x1e6b0b6e,
    0x1f18308b,     0x1f14adcf,     0x1f2b31bc,     0x1f3a3bd7,
    0x1f4a1da9,     0x1f4f8fa5,     0x1f6f798b,     0x1f73523e,
    0x1e2040fb,     0x1e20c2a9,     0x1e214122,     0x1e21c0fb,
    0x1e22c3dd,     0x1e604031,     0x1e60c0c2,     0x1e61406a,
    0x1e61c178,     0x1e624027,     0x1e38000b,     0x9e380243,
    0x1e7800dc,     0x9e7800d6,     0x1e220360,     0x9e22005a,
    0x1e6200e5,     0x9e62017c,     0x1e2601b9,     0x9e6602eb,
    0x1e270113,     0x9e6702b2,     0x1e342320,     0x1e722260,
    0x1e202048,     0x1e6023a8,     0x29025668,     0x29403e86,
    0x6966387b,     0xa93b316a,     0xa97e38e7,     0x298e5980,
    0x29c61d0e,     0x69c00930,     0xa9bc7434,     0xa9c530b5,
    0x28b26378,     0x28c25a5c,     0x68f419b1,     0xa8b668bc,
    0xa8f15746,     0x280453cd,     0x284c2cb1,     0xa83a534d,
    0xa87b32fd,     0x05a08020,     0x04b0e3e0,     0x0470e7e1,
    0x042f9c20,     0x043f9c35,     0x047f9c20,     0x04ff9c20,
    0x04299420,     0x04319160,     0x0461943e,     0x04a19020,
    0x042053ff,     0x047f5401,     0x25208028,     0x2538cfe0,
    0x2578d001,     0x25b8efe2,     0x25f8f007,     0xa400a3e0,
    0xa4a8a7ea,     0xa547a814,     0xa4084ffe,     0xa55c53e0,
    0xa5e1540b,     0xe400fbf6,     0xe408ffff,     0xe547e400,
    0xe4014be0,     0xe4a84fe0,     0xe5f25000,     0x858043e0,
    0x85a043ff,     0xe59f5d08,     0x1e601000,     0x1e603000,
    0x1e621000,     0x1e623000,     0x1e641000,     0x1e643000,
    0x1e661000,     0x1e663000,     0x1e681000,     0x1e683000,
    0x1e6a1000,     0x1e6a3000,     0x1e6c1000,     0x1e6c3000,
    0x1e6e1000,     0x1e6e3000,     0x1e701000,     0x1e703000,
    0x1e721000,     0x1e723000,     0x1e741000,     0x1e743000,
    0x1e761000,     0x1e763000,     0x1e781000,     0x1e783000,
    0x1e7a1000,     0x1e7a3000,     0x1e7c1000,     0x1e7c3000,
    0x1e7e1000,     0x1e7e3000,     0x04bb020e,     0x04ba04c0,
    0x6586019b,     0x6593089e,     0x65c2060b,     0x04d6a18f,
    0x040016e9,     0x0490835e,     0x045aaa44,     0x04938579,
    0x0411990a,     0x04101624,     0x0497ad3e,     0x04deae80,
    0x04481c77,     0x044a0960,     0x04c118ab,     0x049caa30,
    0x6580834f,     0x658d9e6a,     0x65c68238,     0x65c791fa,
    0x65c28a38,     0x049db7be,     0x6582b552,     0x65c0abde,
    0x6581bbc6,     0x65cdb854,     0x658197a9,     0x65f60872,
    0x65ec29af,     0x65be43cc,     0x65e06ea7,     0x04544b53,
    0x04d57c30,     0x04323095,     0x04a7324c,     0x046d31f9,
    0x04da30eb,     0x04d8252b,     0x04d93c1c,     0x044820f0,
    0x040a2fac,     0x65873975,     0x65c62886,     0x65d820e7,
    0x04013fac, 
  };
// END  Generated code -- do not edit

  asm_check((unsigned int *)entry, insns, sizeof insns / sizeof insns[0]);

  {
    address PC = __ pc();
    __ ld1(v0, __ T16B, Address(r16));      // No offset
    __ ld1(v0, __ T8H, __ post(r16, 16));   // Post-index
    __ ld2(v0, v1, __ T8H, __ post(r24, 16 * 2));   // Post-index
    __ ld1(v0, __ T16B, __ post(r16, r17)); // Register post-index
    static const unsigned int vector_insns[] = {
       0x4c407200, // ld1   {v0.16b}, [x16]
       0x4cdf7600, // ld1   {v0.8h}, [x16], #16
       0x4cdf8700, // ld2   {v0.8h, v1.8h}, [x24], #32
       0x4cd17200, // ld1   {v0.16b}, [x16], x17
      };
    asm_check((unsigned int *)PC, vector_insns,
              sizeof vector_insns / sizeof vector_insns[0]);
  }

#endif // ASSERT
}

#undef __

void Assembler::emit_data64(jlong data,
                            relocInfo::relocType rtype,
                            int format) {
  if (rtype == relocInfo::none) {
    emit_int64(data);
  } else {
    emit_data64(data, Relocation::spec_simple(rtype), format);
  }
}

void Assembler::emit_data64(jlong data,
                            RelocationHolder const& rspec,
                            int format) {

  assert(inst_mark() != NULL, "must be inside InstructionMark");
  // Do not use AbstractAssembler::relocate, which is not intended for
  // embedded words.  Instead, relocate to the enclosing instruction.
  code_section()->relocate(inst_mark(), rspec, format);
  emit_int64(data);
}

extern "C" {
  void das(uint64_t start, int len) {
    ResourceMark rm;
    len <<= 2;
    if (len < 0)
      Disassembler::decode((address)start + len, (address)start);
    else
      Disassembler::decode((address)start, (address)start + len);
  }

  JNIEXPORT void das1(unsigned long insn) {
    das(insn, 1);
  }
}

#define gas_assert(ARG1) assert(ARG1, #ARG1)

#define __ as->

void Address::lea(MacroAssembler *as, Register r) const {
  Relocation* reloc = _rspec.reloc();
  relocInfo::relocType rtype = (relocInfo::relocType) reloc->type();

  switch(_mode) {
  case base_plus_offset: {
    if (_offset == 0 && _base == r) // it's a nop
      break;
    if (_offset > 0)
      __ add(r, _base, _offset);
    else
      __ sub(r, _base, -_offset);
      break;
  }
  case base_plus_offset_reg: {
    __ add(r, _base, _index, _ext.op(), MAX(_ext.shift(), 0));
    break;
  }
  case literal: {
    if (rtype == relocInfo::none)
      __ mov(r, target());
    else
      __ movptr(r, (uint64_t)target());
    break;
  }
  default:
    ShouldNotReachHere();
  }
}

void Assembler::adrp(Register reg1, const Address &dest, unsigned long &byte_offset) {
  ShouldNotReachHere();
}

#undef __

#define starti Instruction_aarch64 do_not_use(this); set_current(&do_not_use)

  void Assembler::adr(Register Rd, address adr) {
    long offset = adr - pc();
    int offset_lo = offset & 3;
    offset >>= 2;
    starti;
    f(0, 31), f(offset_lo, 30, 29), f(0b10000, 28, 24), sf(offset, 23, 5);
    rf(Rd, 0);
  }

  void Assembler::_adrp(Register Rd, address adr) {
    uint64_t pc_page = (uint64_t)pc() >> 12;
    uint64_t adr_page = (uint64_t)adr >> 12;
    long offset = adr_page - pc_page;
    int offset_lo = offset & 3;
    offset >>= 2;
    starti;
    f(1, 31), f(offset_lo, 30, 29), f(0b10000, 28, 24), sf(offset, 23, 5);
    rf(Rd, 0);
  }

#undef starti

Address::Address(address target, relocInfo::relocType rtype) : _mode(literal){
  _is_lval = false;
  _target = target;
  switch (rtype) {
  case relocInfo::oop_type:
  case relocInfo::metadata_type:
    // Oops are a special case. Normally they would be their own section
    // but in cases like icBuffer they are literals in the code stream that
    // we don't have a section for. We use none so that we get a literal address
    // which is always patchable.
    break;
  case relocInfo::external_word_type:
    _rspec = external_word_Relocation::spec(target);
    break;
  case relocInfo::internal_word_type:
    _rspec = internal_word_Relocation::spec(target);
    break;
  case relocInfo::opt_virtual_call_type:
    _rspec = opt_virtual_call_Relocation::spec();
    break;
  case relocInfo::static_call_type:
    _rspec = static_call_Relocation::spec();
    break;
  case relocInfo::runtime_call_type:
    _rspec = runtime_call_Relocation::spec();
    break;
  case relocInfo::poll_type:
  case relocInfo::poll_return_type:
    _rspec = Relocation::spec_simple(rtype);
    break;
  case relocInfo::none:
    _rspec = RelocationHolder::none;
    break;
  default:
    ShouldNotReachHere();
    break;
  }
}

void Assembler::b(const Address &dest) {
  code_section()->relocate(pc(), dest.rspec());
  b(dest.target());
}

void Assembler::bl(const Address &dest) {
  code_section()->relocate(pc(), dest.rspec());
  bl(dest.target());
}

void Assembler::adr(Register r, const Address &dest) {
  code_section()->relocate(pc(), dest.rspec());
  adr(r, dest.target());
}

void Assembler::br(Condition cc, Label &L) {
  if (L.is_bound()) {
    br(cc, target(L));
  } else {
    L.add_patch_at(code(), locator());
    br(cc, pc());
  }
}

void Assembler::wrap_label(Label &L,
                                 Assembler::uncond_branch_insn insn) {
  if (L.is_bound()) {
    (this->*insn)(target(L));
  } else {
    L.add_patch_at(code(), locator());
    (this->*insn)(pc());
  }
}

void Assembler::wrap_label(Register r, Label &L,
                                 compare_and_branch_insn insn) {
  if (L.is_bound()) {
    (this->*insn)(r, target(L));
  } else {
    L.add_patch_at(code(), locator());
    (this->*insn)(r, pc());
  }
}

void Assembler::wrap_label(Register r, int bitpos, Label &L,
                                 test_and_branch_insn insn) {
  if (L.is_bound()) {
    (this->*insn)(r, bitpos, target(L));
  } else {
    L.add_patch_at(code(), locator());
    (this->*insn)(r, bitpos, pc());
  }
}

void Assembler::wrap_label(Label &L, prfop op, prefetch_insn insn) {
  if (L.is_bound()) {
    (this->*insn)(target(L), op);
  } else {
    L.add_patch_at(code(), locator());
    (this->*insn)(pc(), op);
  }
}

// An "all-purpose" add/subtract immediate, per ARM documentation:
// A "programmer-friendly" assembler may accept a negative immediate
// between -(2^24 -1) and -1 inclusive, causing it to convert a
// requested ADD operation to a SUB, or vice versa, and then encode
// the absolute value of the immediate as for uimm24.
void Assembler::add_sub_immediate(Register Rd, Register Rn, unsigned uimm, int op,
                                  int negated_op) {
  bool sets_flags = op & 1;   // this op sets flags
  union {
    unsigned u;
    int imm;
  };
  u = uimm;
  bool shift = false;
  bool neg = imm < 0;
  if (neg) {
    imm = -imm;
    op = negated_op;
  }
  assert(Rd != sp || imm % 16 == 0, "misaligned stack");
  if (imm >= (1 << 11)
      && ((imm >> 12) << 12 == imm)) {
    imm >>= 12;
    shift = true;
  }
  f(op, 31, 29), f(0b10001, 28, 24), f(shift, 23, 22), f(imm, 21, 10);

  // add/subtract immediate ops with the S bit set treat r31 as zr;
  // with S unset they use sp.
  if (sets_flags)
    zrf(Rd, 0);
  else
    srf(Rd, 0);

  srf(Rn, 5);
}

bool Assembler::operand_valid_for_add_sub_immediate(long imm) {
  bool shift = false;
  unsigned long uimm = uabs(imm);
  if (uimm < (1 << 12))
    return true;
  if (uimm < (1 << 24)
      && ((uimm >> 12) << 12 == uimm)) {
    return true;
  }
  return false;
}

bool Assembler::operand_valid_for_logical_immediate(bool is32, uint64_t imm) {
  return encode_logical_immediate(is32, imm) != 0xffffffff;
}

static uint64_t doubleTo64Bits(jdouble d) {
  union {
    jdouble double_value;
    uint64_t double_bits;
  };

  double_value = d;
  return double_bits;
}

bool Assembler::operand_valid_for_float_immediate(double imm) {
  // If imm is all zero bits we can use ZR as the source of a
  // floating-point value.
  if (doubleTo64Bits(imm) == 0)
    return true;

  // Otherwise try to encode imm then convert the encoded value back
  // and make sure it's the exact same bit pattern.
  unsigned result = encoding_for_fp_immediate(imm);
  return doubleTo64Bits(imm) == fp_immediate_for_encoding(result, true);
}

int AbstractAssembler::code_fill_byte() {
  return 0;
}

// n.b. this is implemented in subclass MacroAssembler
void Assembler::bang_stack_with_offset(int offset) { Unimplemented(); }


// and now the routines called by the assembler which encapsulate the
// above encode and decode functions

uint32_t
asm_util::encode_logical_immediate(bool is32, uint64_t imm)
{
  if (is32) {
    /* Allow all zeros or all ones in top 32-bits, so that
       constant expressions like ~1 are permitted. */
    if (imm >> 32 != 0 && imm >> 32 != 0xffffffff)
      return 0xffffffff;
    /* Replicate the 32 lower bits to the 32 upper bits.  */
    imm &= 0xffffffff;
    imm |= imm << 32;
  }

  return encoding_for_logical_immediate(imm);
}

unsigned Assembler::pack(double value) {
  float val = (float)value;
  unsigned result = encoding_for_fp_immediate(val);
  guarantee(unpack(result) == value,
            "Invalid floating-point immediate operand");
  return result;
}

// Packed operands for  Floating-point Move (immediate)

static float unpack(unsigned value) {
  union {
    unsigned ival;
    float val;
  };
  ival = fp_immediate_for_encoding(value, 0);
  return val;
}
